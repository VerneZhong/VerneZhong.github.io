<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Verne Blog</title>
  <icon>https://www.gravatar.com/avatar/d4161917a7dfe52bfa1d2d10e77344fd</icon>
  <subtitle>很多人不曾见过太阳，也就可以忍受黑暗!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chivalry727.github.io/"/>
  <updated>2025-03-02T12:29:13.501Z</updated>
  <id>https://chivalry727.github.io/</id>
  
  <author>
    <name>Verne.Zhong</name>
    <email>verne.zhong@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式之解释器模式</title>
    <link href="https://chivalry727.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chivalry727.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2025-03-02T11:24:17.000Z</published>
    <updated>2025-03-02T12:29:13.501Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/user-attachments/assets/8de0e1b4-cc0e-4a17-86de-263b0a588b5b"></p><span id="more"></span><h2 id="设计模式之备忘录模式"><a href="#设计模式之备忘录模式" class="headerlink" title="设计模式之备忘录模式"></a>设计模式之备忘录模式</h2><h3 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h3><p>解释器模式（Interpreter Pattern）是行为型设计模式之一，用于定义一个语言的文法，并创建解释器来解释该语言中的句子。它适用于某些特定领域的语言解析，如数学表达式、正则表达式、SQL解析等。</p><h3 id="角色与结构"><a href="#角色与结构" class="headerlink" title="角色与结构"></a>角色与结构</h3><p>解释器模式通常由以下几个核心角色组成：</p><p>1️⃣ <strong>抽象表达式（Abstract Expression）</strong></p><ul><li>定义解释器的接口，所有的解释器都需要实现这个接口。</li></ul><p>2️⃣ <strong>终结符表达式（Terminal Expression）</strong></p><ul><li>具体实现解析的基本单元，比如解析数字、变量等。</li></ul><p>3️⃣ <strong>非终结符表达式（Non-Terminal Expression）</strong></p><ul><li>组合多个终结表达式，构成复杂的解析逻辑，如加法、乘法等运算。</li></ul><p>4️⃣ <strong>上下文（Context）</strong></p><ul><li>存储和管理全局信息，比如变量的值、运算环境等。</li></ul><p>5️⃣ <strong>客户端（Client）</strong></p><ul><li>构造抽象语法树（AST），并调用解释器解析表达式。</li></ul><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>编译器、解释器（如SQL解析器、数学公式解析器）</li><li>正则表达式解析（如Pattern.compile(“a*b”))</li><li>命令脚本解析（如计算器应用、命令模式）</li><li>语法树解析（如XML/JSON解析器）</li></ul><h3 id="代码示例（Java实现）"><a href="#代码示例（Java实现）" class="headerlink" title="代码示例（Java实现）"></a>代码示例（Java实现）</h3><p>示例：实现一个简单的数学表达式解释器（支持加法和乘法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象表达式接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Expression</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">interpret</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 终结符表达式（数字）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumberExpression</span> <span class="keyword">implements</span> <span class="title class_">Expression</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NumberExpression</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">interpret</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非终结符表达式（加法）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AddExpression</span> <span class="keyword">implements</span> <span class="title class_">Expression</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Expression left, right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AddExpression</span><span class="params">(Expression left, Expression right)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">interpret</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> left.interpret() + right.interpret();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非终结符表达式（乘法）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MultiplyExpression</span> <span class="keyword">implements</span> <span class="title class_">Expression</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Expression left, right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MultiplyExpression</span><span class="params">(Expression left, Expression right)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">interpret</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> left.interpret() * right.interpret();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterpreterPatternDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 构造表达式: (3 + 5) * 2</span></span><br><span class="line">        <span class="type">Expression</span> <span class="variable">three</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NumberExpression</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="type">Expression</span> <span class="variable">five</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NumberExpression</span>(<span class="number">5</span>);</span><br><span class="line">        <span class="type">Expression</span> <span class="variable">add</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AddExpression</span>(three, five); <span class="comment">// 3 + 5</span></span><br><span class="line">        <span class="type">Expression</span> <span class="variable">two</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NumberExpression</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="type">Expression</span> <span class="variable">multiply</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MultiplyExpression</span>(add, two); <span class="comment">// (3 + 5) * 2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解释表达式并计算结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;计算结果: &quot;</span> + multiply.interpret()); <span class="comment">// 输出 16</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">计算结果：16</span><br></pre></td></tr></table></figure><h3 id="解释器模式的优缺点"><a href="#解释器模式的优缺点" class="headerlink" title="解释器模式的优缺点"></a><strong>解释器模式的优缺点</strong></h3><p>✅ <strong>优点：</strong></p><p>​    •<strong>可扩展性强</strong>：支持扩展新的语法规则（新增表达式类）。</p><p>​    •<strong>符合 OCP（开放封闭原则）</strong>：修改语法不会影响已有的代码。</p><p>​    •<strong>代码结构清晰</strong>：符合语言的文法结构，易于理解。</p><p>❌ <strong>缺点：</strong></p><p>​    •<strong>效率低</strong>：对于复杂语法来说，构建 AST 可能会导致性能下降。</p><p>​    •<strong>代码复杂度高</strong>：需要定义大量的类来表示不同的语法规则。</p><p>​    •<strong>不适用于复杂的语法</strong>：一般适用于简单语言，复杂解析通常使用<strong>编译原理技术</strong>（如 ANTLR、Lex/Yacc）。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>1️⃣ <strong>解释器模式用于解析和执行语言表达式</strong>，适用于领域特定语言（DSL）。</p><p>2️⃣ <strong>适用于简单的语法解析</strong>，但对于复杂语言通常使用专门的解析工具。</p><p>3️⃣ <strong>核心思想：构造 AST（抽象语法树），递归解析表达式。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/8de0e1b4-cc0e-4a17-86de-263b0a588b5b&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://chivalry727.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="解释器模式" scheme="https://chivalry727.github.io/tags/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Interpreter Pattern" scheme="https://chivalry727.github.io/tags/Interpreter-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之备忘录模式</title>
    <link href="https://chivalry727.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chivalry727.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</id>
    <published>2025-03-01T04:06:04.000Z</published>
    <updated>2025-03-01T11:13:31.512Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/user-attachments/assets/de961272-1096-4aec-801b-03dc54eacb0e"></p><span id="more"></span><h2 id="设计模式之备忘录模式"><a href="#设计模式之备忘录模式" class="headerlink" title="设计模式之备忘录模式"></a>设计模式之备忘录模式</h2><h3 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h3><p>定义：备忘录模式用于在不破坏封装的前提下，捕获对象的状态并在以后恢复。它提供了一种数据快照的机制，使得对象可以回滚到某个历史状态，常用于撤销（Undo）操作。</p><h4 id="核心角色"><a href="#核心角色" class="headerlink" title="核心角色"></a>核心角色</h4><p>1.发起人（Originator）</p><ul><li>负责创建备忘录，并存储当前状态。</li><li>可以根据备忘录恢复先前的状态。</li></ul><p>2.备忘录（Memento）</p><ul><li>存储发起人的内部状态。</li><li>保护发起人的状态不被外界修改（通常是不可变的）。</li></ul><p>3.管理者（Caretaker）</p><ul><li>负责保存和恢复备忘录。</li><li>不会修改备忘录的内容，只用于存储和提供给Originator进行恢复。</li></ul><h3 id="示例代码（Java实现）"><a href="#示例代码（Java实现）" class="headerlink" title="示例代码（Java实现）"></a>示例代码（Java实现）</h3><p>1️⃣ <strong>备忘录（Memento）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 备忘录：存储状态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/03/01 19:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Memento</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Memento</span><span class="params">(String state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2️⃣ <strong>发起人（Originator）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发起人：创建和恢复备忘录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/03/01 19:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Originator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(String state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前状态： &quot;</span> + state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Memento <span class="title function_">saveStateToMemento</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Memento</span>(state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 恢复备忘录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> memento</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">restoreFromMemento</span><span class="params">(Memento memento)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = memento.getState();</span><br><span class="line">        System.out.println(<span class="string">&quot;状态恢复为：&quot;</span> + state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Originator&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;state=&#x27;&quot;</span> + state + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3️⃣ <strong>管理者（Caretaker）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 管理者：存储多个备忘录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/03/01 19:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Caretaker</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Memento&gt; history = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMemento</span><span class="params">(Memento memento)</span> &#123;</span><br><span class="line">        history.add(memento);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Memento <span class="title function_">getMemento</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> history.get(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/03/01 19:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MementoPatternDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Originator</span> <span class="variable">originator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Originator</span>();</span><br><span class="line">        <span class="type">Caretaker</span> <span class="variable">caretaker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Caretaker</span>();</span><br><span class="line"></span><br><span class="line">        originator.setState(<span class="string">&quot;状态1&quot;</span>);</span><br><span class="line">        caretaker.addMemento(originator.saveStateToMemento());</span><br><span class="line"></span><br><span class="line">        originator.setState(<span class="string">&quot;状态2&quot;</span>);</span><br><span class="line">        caretaker.addMemento(originator.saveStateToMemento());</span><br><span class="line"></span><br><span class="line">        originator.setState(<span class="string">&quot;状态3&quot;</span>);</span><br><span class="line">        caretaker.addMemento(originator.saveStateToMemento());</span><br><span class="line">        System.out.println(<span class="string">&quot;当前状态：&quot;</span> + originator);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 恢复到之前的状态</span></span><br><span class="line">        <span class="comment">// 恢复到状态1</span></span><br><span class="line">        originator.restoreFromMemento(caretaker.getMemento(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当前状态： 状态<span class="number">1</span></span><br><span class="line">当前状态： 状态<span class="number">2</span></span><br><span class="line">当前状态： 状态<span class="number">3</span></span><br><span class="line">当前状态：Originator&#123;<span class="keyword">state</span>=&#x27;状态<span class="number">3</span>&#x27;&#125;</span><br><span class="line">状态恢复为：状态<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>文本编辑器的撤销功能（Word、记事本）</li><li>游戏存档（保存和恢复游戏进度）</li><li>事务管理（数据库事务回滚）</li><li>IDE代码撤销/恢复（Ctrl+Z &amp; Ctrl+Y）</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>备忘录模式用于保存对象的历史状态，便于后续恢复。</li><li>适用于撤销、恢复、存档等功能，但需要注意内存消耗。</li><li>三大角色（发起人、备忘录、管理者）各司其职，保证封装性。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/de961272-1096-4aec-801b-03dc54eacb0e&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://chivalry727.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="中介者模式" scheme="https://chivalry727.github.io/tags/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Memento Pattern" scheme="https://chivalry727.github.io/tags/Memento-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之中介者模式</title>
    <link href="https://chivalry727.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chivalry727.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2025-02-28T12:33:42.000Z</published>
    <updated>2025-03-01T03:58:37.289Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/user-attachments/assets/610c0eed-59c7-4084-9bb5-6fc1bdaa6c53"></p><span id="more"></span><h2 id="设计模式之中介者模式"><a href="#设计模式之中介者模式" class="headerlink" title="设计模式之中介者模式"></a>设计模式之中介者模式</h2><h3 id="什么是中介者模式？"><a href="#什么是中介者模式？" class="headerlink" title="什么是中介者模式？"></a>什么是中介者模式？</h3><ul><li>中介者模式是一种行为型设计模式，它的核心思想是用一个中介者对象来封装一组对象之间的交互，使对象之间不需要相互引用，从而降低耦合性。</li></ul><h3 id="中介者模式的核心概念"><a href="#中介者模式的核心概念" class="headerlink" title="中介者模式的核心概念"></a>中介者模式的核心概念</h3><h5 id="·-问题："><a href="#·-问题：" class="headerlink" title="· 问题："></a>· 问题：</h5><p>​    在复杂系统中，多个对象之间可能会直接通信，导致耦合度过高，维护起来十分困难。</p><h5 id="·-解决方案："><a href="#·-解决方案：" class="headerlink" title="· 解决方案："></a>· 解决方案：</h5><p>​    通过引入中介者（Mediator），让对象不再直接通信，而是通过中介者协调它们的交互。</p><h5 id="·-优点"><a href="#·-优点" class="headerlink" title="· 优点"></a>· 优点</h5><ul><li>降低对象间的耦合性，每个对象不需要知道其他对象的存在。</li><li>更容易维护和扩展，新增对象时不影响现有对象。</li><li>优化通信方式，避免对象间过度依赖。</li></ul><h5 id="·-缺点"><a href="#·-缺点" class="headerlink" title="· 缺点"></a>· 缺点</h5><ul><li>中介者可能变得复杂，如果处理的对象过多，可能会变成“上帝类”，难以维护。</li></ul><h3 id="例子：飞机塔台控制"><a href="#例子：飞机塔台控制" class="headerlink" title="例子：飞机塔台控制"></a>例子：飞机塔台控制</h3><p> 假设有多个飞机在机场起飞和降落，如果每架飞机都要直接和其他飞机通信，就会非常混乱。为了解决这个问题，我们引入塔台（中介者），让所有飞机通过塔台进行协调。</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p><strong>1️⃣ 定义中介者接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中介者接口，定义通信规则</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/02/28 21:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AirTrafficControl</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String message, Airplane airplane)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2️⃣ 具体中介者（塔台）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体的中介者（塔台）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/02/28 21:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControlTower</span> <span class="keyword">implements</span> <span class="title class_">AirTrafficControl</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Airplane&gt; airplanes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册飞机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> airplane</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerAirplane</span><span class="params">(Airplane airplane)</span> &#123;</span><br><span class="line">        airplanes.add(airplane);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过中介者发送消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sender</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String message, Airplane sender)</span> &#123;</span><br><span class="line">        airplanes.forEach(airplane -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (airplane != sender) &#123;</span><br><span class="line">                airplane.receiveMessage(message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3️⃣ 定义同事类（飞机）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 飞机抽象类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/02/28 21:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Airplane</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> AirTrafficControl controlTower;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Airplane</span><span class="params">(AirTrafficControl controlTower)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.controlTower = controlTower;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String message)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">receiveMessage</span><span class="params">(String message)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4️⃣ 具体飞机类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体飞机A</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/02/28 21:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Boeing737</span> <span class="keyword">extends</span> <span class="title class_">Airplane</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Boeing737</span><span class="params">(AirTrafficControl controlTower)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(controlTower);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Boeing737 发送消息：&quot;</span> + message);</span><br><span class="line">        controlTower.sendMessage(message, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Boeing737 收到消息：&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体飞机 B</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/02/28 21:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AirbusA320</span> <span class="keyword">extends</span> <span class="title class_">Airplane</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AirbusA320</span><span class="params">(AirTrafficControl controlTower)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(controlTower);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AirbusA320 发送消息：&quot;</span> + message);</span><br><span class="line">        controlTower.sendMessage(message, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AirbusA320 收到消息：&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5️⃣ 测试代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试main方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/02/28 22:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MediatorPatternDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ControlTower</span> <span class="variable">tower</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ControlTower</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Airplane</span> <span class="variable">plane1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boeing737</span>(tower);</span><br><span class="line">        <span class="type">Airplane</span> <span class="variable">plane2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AirbusA320</span>(tower);</span><br><span class="line"></span><br><span class="line">        tower.registerAirplane(plane1);</span><br><span class="line">        tower.registerAirplane(plane2);</span><br><span class="line"></span><br><span class="line">        plane1.sendMessage(<span class="string">&quot;请求起飞🛫&quot;</span>);</span><br><span class="line">        plane2.sendMessage(<span class="string">&quot;请求降落🛬&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>🛫 运行结果</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Boeing737 </span>发送消息：请求起飞🛫</span><br><span class="line">AirbusA320 收到消息：请求起飞🛫</span><br><span class="line">AirbusA320 发送消息：请求降落🛬</span><br><span class="line"><span class="keyword">Boeing737 </span>收到消息：请求降落🛬</span><br></pre></td></tr></table></figure><h3 id="📌-适用场景"><a href="#📌-适用场景" class="headerlink" title="📌 适用场景"></a><strong>📌 适用场景</strong></h3><ul><li>GUI组件交互：按钮、输入框、复选框通过中介者协调，而不是直接调用。</li><li>聊天室：所有用户通过服务器（中介者）发送和接收消息。</li><li>任务调度系统：各个子系统不直接通信，而是通过任务调度中心协调。</li></ul><h3 id="📌-总结"><a href="#📌-总结" class="headerlink" title="📌 总结"></a><strong>📌 总结</strong></h3><ul><li>核心思想：让多个对象通过中介者交互，而不是直接通信，降低耦合</li><li>优点：降低对象之间的依赖，提高代码的可维护性和扩展性。</li><li>缺点：中介者可能变得复杂，成为“上帝类“。</li><li>应用场景：GUI组件、聊天室、任务调度、飞机塔台、微服务通信等。</li></ul><p>中介者模式通过一个中间对象来协调多个对象的交互，避免对象之间直接耦合，提升系统的可维护性和扩展性。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/610c0eed-59c7-4084-9bb5-6fc1bdaa6c53&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://chivalry727.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="中介者模式" scheme="https://chivalry727.github.io/tags/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Mediator Pattern" scheme="https://chivalry727.github.io/tags/Mediator-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之建造者模式</title>
    <link href="https://chivalry727.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chivalry727.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-09-19T11:42:42.000Z</published>
    <updated>2025-02-26T11:48:40.313Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/user-attachments/assets/da4f905b-afe1-44b2-8888-f38f91e1c842"></p><span id="more"></span><h2 id="设计模式之建造者模式"><a href="#设计模式之建造者模式" class="headerlink" title="设计模式之建造者模式"></a>设计模式之建造者模式</h2><h3 id="什么是建造者模式"><a href="#什么是建造者模式" class="headerlink" title="什么是建造者模式"></a>什么是建造者模式</h3><p>建造者（Builder）模式的定义：指将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，这样的设计模式被称为建造者模式。它是将一个复杂的对象分解为多个简单的对象，然后一步一步构建而成。它将变与不变相分离，即产品的组成部分是不变的，但每一部分是可以灵活选择的。</p><p>当对象包含很多属性时，引入了建造者模式来解决工厂和抽象工厂设计模式的一些问题。</p><p>当对象包含许多属性时，工厂和抽象工厂设计模式存在三个主要问题。</p><ol><li>从客户端程序传递到<code>Factory</code>类的参数过多，这很容易出错，因为在大多数情况下，参数的类型是相同的，并且从客户端很难保持参数的顺序。</li><li>一些参数可能是可选的，但是在出厂模式下，我们被迫发送所有参数，而可选参数需要以NULL的形式发送。</li><li>如果对象很重且其创建很复杂，那么所有这些复杂性将成为混淆的<code>Factory</code>类的一部分。</li></ol><p>通过为构造函数提供必需的参数，然后提供不同的setter方法来设置可选参数，我们可以解决大量参数的问题。 这种方法的问题在于，除非明确设置所有属性，否则对象状态将一直不一致。</p><p>Builder模式通过提供一种逐步构建对象并提供一种将实际返回最终Object的方法的方式，解决了具有大量可选参数和状态不一致的问题。</p><h3 id="Java中的Builder设计模式"><a href="#Java中的Builder设计模式" class="headerlink" title="Java中的Builder设计模式"></a>Java中的Builder设计模式</h3><p>让我们看看如何在Java中实现构建器设计模式。</p><ol><li>首先，您需要创建一个静态嵌套类，然后将所有参数从外部类复制到Builder类。 我们应该遵循命名约定，如果类名称为<code>Computer</code>，则构建器类应命名为<code>ComputerBuilder</code>。</li><li><code>Java Builder</code>类应该具有一个公共构造函数，其中带有所有必需的属性作为参数。</li><li><code>Java Builder</code>类应具有设置可选参数的方法，并且应在设置可选属性后返回相同的Builder对象。</li><li>最后一步是在构建器类中提供<code>build()</code>方法，该方法将返回客户端程序所需的Object。 为此，我们需要在Class中有一个带有Builder类作为参数的私有构造函数。</li></ol><p>这是示例构建器模式示例代码，其中有一个<code>Computer</code>类和<code>ComputerBuilder</code>类来构建它。</p><p><strong><em>Computer.class</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 电脑</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-19 21:01:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * required parameters</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String HDD;</span><br><span class="line">    <span class="keyword">private</span> String RAM;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * optional parameters</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isGraphicsCardEnabled; <span class="comment">// 显卡是否开启</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isBluetoothEnabled; <span class="comment">// 蓝牙是否开启</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHDD</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> HDD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRAM</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> RAM;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isGraphicsCardEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isGraphicsCardEnabled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBluetoothEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isBluetoothEnabled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Computer</span><span class="params">(ComputerBuilder builder)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.HDD = builder.HDD;</span><br><span class="line">        <span class="built_in">this</span>.RAM = builder.RAM;</span><br><span class="line">        <span class="built_in">this</span>.isBluetoothEnabled = builder.isBluetoothEnabled;</span><br><span class="line">        <span class="built_in">this</span>.isGraphicsCardEnabled = builder.isGraphicsCardEnabled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Builder Class</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ComputerBuilder</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * required parameters</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> String HDD;</span><br><span class="line">        <span class="keyword">private</span> String RAM;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * optional parameters</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> isGraphicsCardEnabled; <span class="comment">// 显卡是否开启</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> isBluetoothEnabled; <span class="comment">// 蓝牙是否开启</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ComputerBuilder</span><span class="params">(String HDD, String RAM)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.HDD = HDD;</span><br><span class="line">            <span class="built_in">this</span>.RAM = RAM;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ComputerBuilder <span class="title function_">setGraphicsCardEnabled</span><span class="params">(<span class="type">boolean</span> graphicsCardEnabled)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.isGraphicsCardEnabled = graphicsCardEnabled;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ComputerBuilder <span class="title function_">setBluetoothEnabled</span><span class="params">(<span class="type">boolean</span> bluetoothEnabled)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.isBluetoothEnabled = bluetoothEnabled;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Computer <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Computer</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Computer&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;HDD=&#x27;&quot;</span> + HDD + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, RAM=&#x27;&quot;</span> + RAM + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, isGraphicsCardEnabled=&quot;</span> + isGraphicsCardEnabled +</span><br><span class="line">                <span class="string">&quot;, isBluetoothEnabled=&quot;</span> + isBluetoothEnabled +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，<code>Computer</code>类仅具有getter方法，而没有公共构造函数。 因此，获取<code>Computer</code>对象的唯一方法是通过<code>ComputerBuilder</code>类。</p><p>这是一个构建器模式示例测试程序，显示了如何使用<code>Builder</code>类来获取对象。</p><p><strong><em>TestBuilderPattern.class</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试程序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-19 21:08:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBuilderPattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// Using builder to get the object in a single line of code and</span></span><br><span class="line">        <span class="comment">// without any inconsistent state or arguments management issues</span></span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>.ComputerBuilder(<span class="string">&quot;500GB&quot;</span>, <span class="string">&quot;8GB&quot;</span>)</span><br><span class="line">                .setBluetoothEnabled(<span class="literal">true</span>)</span><br><span class="line">                .setGraphicsCardEnabled(<span class="literal">true</span>)</span><br><span class="line">                .build();</span><br><span class="line">        System.out.println(computer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JDK中的Builder设计模式示例"><a href="#JDK中的Builder设计模式示例" class="headerlink" title="JDK中的Builder设计模式示例"></a>JDK中的Builder设计模式示例</h3><p>Java类中的一些Builder模式示例为：</p><ul><li><code>java.lang.StringBuilder#append() (unsynchronized)</code></li><li><code>java.lang.StringBuffer#append() (synchronized)</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/da4f905b-afe1-44b2-8888-f38f91e1c842&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://chivalry727.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="建造者模式" scheme="https://chivalry727.github.io/tags/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Builder Design Pattern" scheme="https://chivalry727.github.io/tags/Builder-Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之桥接模式</title>
    <link href="https://chivalry727.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chivalry727.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-09-15T07:33:39.000Z</published>
    <updated>2025-02-27T11:09:51.094Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/user-attachments/assets/3b8ea6ca-5a0c-4ef1-a587-76511d899a90"></p><span id="more"></span><h2 id="设计模式之桥接模式"><a href="#设计模式之桥接模式" class="headerlink" title="设计模式之桥接模式"></a>设计模式之桥接模式</h2><h3 id="什么是桥接设计模式？"><a href="#什么是桥接设计模式？" class="headerlink" title="什么是桥接设计模式？"></a>什么是桥接设计模式？</h3><p>桥接设计模式属于结构设计模式类别。 这种模式侧重于抽象概念的局限性。 在Java上下文中，我们使用继承来开发抽象概念。 有几个实现偏差支持实现继承。 但是，这将实现永久绑定到抽象上，从而限制了灵活性。 在某些情况下，您想独立地修改或扩展抽象以及实现。 桥接模式通过将抽象与其实现分离，将有助于解决该限制。</p><p>这种模式很好地说明了“优先考虑组成而不是继承”的概念</p><p>GOF定义的桥梁设计模式，</p><blockquote><p>“将抽象与其实现分离开来，以便两者可以独立变化。”</p></blockquote><p>什么是抽象？</p><p>如果我们想到Java语言的要点，则可以通过接口或抽象类来定义抽象。 这是定义抽象概念的非常狭窄的方法。 当认为是面向对象的概念时，抽象只是对更复杂细节的表示或概括。 抽象涵盖了整个事物的具体实现的细节。</p><p>通常，当抽象需要多个实现时，继承就是一种机制，用于满足该需求。 但是，某些方案要求独立添加或修改抽象以及实现，而不会给系统带来任何错误。</p><h3 id="现实生活中的例子"><a href="#现实生活中的例子" class="headerlink" title="现实生活中的例子"></a>现实生活中的例子</h3><p>假设汽车和遥控器场景。 汽车是这种情况的抽象。 丰田、本田和奥迪将成为汽车抽象的实现。 每辆汽车将具有一套遥控器。 如果远程控制是抽象远程启动器，则远程门锁/开和远程报警将作为远程控制的实现。 宝马这样的汽车实现中有一个新的补充。 它还应具有遥控器的3种实现方式。 因此，抽象和实现可以根据需求而变化。</p><h3 id="桥接模式如何工作？"><a href="#桥接模式如何工作？" class="headerlink" title="桥接模式如何工作？"></a>桥接模式如何工作？</h3><p>通常，在这种模式下，抽象类代表抽象。 该抽象维护一个单独的层次结构。 单独的层次结构维护抽象类的实现。 同样，模式允许类（抽象）及其作用（实现）随需要而变化。 植入包括一个抽象点和该层次结构下的几个实现标准。</p><h3 id="桥接模式的结构"><a href="#桥接模式的结构" class="headerlink" title="桥接模式的结构"></a>桥接模式的结构</h3><p>让我们使用抽象和具体的实现策略来阐明这一点。 假设您有两个系统，每个系统中都有抽象类和具体类。 系统X由“摘要A”组成，而具体实现则由“具体A”组成。 然后，系统Y由“摘要B”组成，其具体实现为“混凝土B”。 摘要A通过“ Has-A”关系与摘要B连接。 摘要A在其内部维护摘要B的实例。 这种“ Has-A”关系在两个系统之间架起了一座桥梁。 因此，模式包含两层抽象。 因此，该结构被称为桥接模式结构。</p><p><img src="https://tvax1.sinaimg.cn/large/008aQ1h9ly1gist03hca4j30e206r3ye.jpg"></p><h3 id="桥接模式解决的问题"><a href="#桥接模式解决的问题" class="headerlink" title="桥接模式解决的问题"></a>桥接模式解决的问题</h3><p>在应用程序中，我们应该首先确定候选组件以开发一个抽象并作为实现。 抽象和实现分为两个层次结构，并独立维护。</p><h3 id="桥接模式的标准技术说明"><a href="#桥接模式的标准技术说明" class="headerlink" title="桥接模式的标准技术说明"></a>桥接模式的标准技术说明</h3><p>图2代表了桥梁设计模式的UML图。 它描述了两组抽象，它们独立变化。</p><p><img src="https://tvax2.sinaimg.cn/large/008aQ1h9ly1gist03pn9gj30jl07z0ss.jpg"></p><p>桥接设计模式类图</p><h3 id="桥梁设计模式的组成部分"><a href="#桥梁设计模式的组成部分" class="headerlink" title="桥梁设计模式的组成部分"></a>桥梁设计模式的组成部分</h3><ul><li><strong><em>Abstraction</em></strong>：这是桥接模式的核心组件之一，它包括对实现者的引用。</li><li><strong><em>Refined Abstraction</em></strong>：这扩展了抽象并向实现者隐藏了更精细的元素。就是说，这不会影响实现者，以及这些实现，也不依赖于<code>Implementor</code>接口中的任何具体实现者。</li><li><strong><em>Implementor</em></strong>：这是下级实施的接口。 这不需要直接与抽象有关。 它仅与has-a关系连接。</li><li><strong><em>ConcreteImplementor</em></strong>：该组件通过定义实现来实现实现者接口。 实施细节对客户端隐藏。</li></ul><h3 id="实现桥接模式步骤"><a href="#实现桥接模式步骤" class="headerlink" title="实现桥接模式步骤"></a>实现桥接模式步骤</h3><ol><li>确定应独立变化的内容那就是您必须基于正交维度派生和分析类。 它们可能像前端/后端，域/基础架构以及接口/平台类层次结构</li><li>通过分析候选类别的不同功能来识别“实现者”界面</li><li>将一个类类别标识为“抽象”，并构建抽象类，并在抽象类中包含“实现者”的实例</li><li>然后扩展抽象类以生成不同的实现，以满足您的不同需求</li><li>构建客户端程序以满足您的需求</li><li>您可以根据需要为“抽象”和“执行器”添加更多具体的类，并扩展系统</li></ol><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p>让我们举一个简单的例子来阐明这种模式。 假设一位数字艺术家需要创建具有不同颜色的形状。 他正在开发一个程序来实现这个目标。 最初，几乎没有其他选择。 但是，根据客户的要求，将有不同类型的形状和颜色可以适应以产生最佳效果。 因此，艺术家将来必须在“形状”类别中添加不同的形状，并在“颜色”类别中添加多种颜色。</p><p>在继续之前，让我们看看没有桥接模式的情况。</p><h4 id="没有桥接模式"><a href="#没有桥接模式" class="headerlink" title="没有桥接模式"></a>没有桥接模式</h4><p>您将必须为具有困难命名模式的每种形状创建冗长而复杂的子类。</p><p><img src="https://tvax1.sinaimg.cn/large/008aQ1h9ly1gisthedbd0j30e5066mx4.jpg"></p><h4 id="使用桥接模式"><a href="#使用桥接模式" class="headerlink" title="使用桥接模式"></a>使用桥接模式</h4><p>两个类层次结构将在两个类层次结构之间提供更大的灵活性。</p><p><img src="https://tva3.sinaimg.cn/large/008aQ1h9ly1gisthefm5jj30fs04wmx2.jpg"></p><p>让我们将此场景放到Java编程中。</p><h4 id="该计划的组成部分"><a href="#该计划的组成部分" class="headerlink" title="该计划的组成部分"></a>该计划的组成部分</h4><ul><li><strong><em>AbstractShape</em></strong>：表示一组具体的形状实现的抽象类/接口</li><li><strong><em>RefinedShapeCircle</em></strong>：Circle是“ Shape”抽象的一种扩展</li><li><strong><em>RefinedShapeTriangle</em></strong>：三角形是“ Shape”抽象的另一个示例</li><li><strong><em>ColorImplementor</em></strong>：这是“颜色”类别的抽象，也是“形状”类别的实现的一部分。</li><li><strong><em>ConcreteColorRed</em></strong>：“颜色”抽象的红色扩展</li><li><strong><em>ConcreteColorGreen</em></strong>：“颜色”抽象的绿色扩展</li></ul><h4 id="Java代码示例"><a href="#Java代码示例" class="headerlink" title="Java代码示例"></a>Java代码示例</h4><p><strong><em>ColorImplementor.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ColorImplementor</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">applyColor</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>AbstractShape.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractShape</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建实现者实例（组成）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> ColorImplementor color;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 以实现者作为输入参数的构造函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> color</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AbstractShape</span><span class="params">(ColorImplementor color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 与将颜色填充到对象有关的抽象方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">applyShapeColor</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>RefinedShapeCircle.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefinedShapeCircle</span> <span class="keyword">extends</span> <span class="title class_">AbstractShape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RefinedShapeCircle</span><span class="params">(ColorImplementor color)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">applyShapeColor</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Circle color applying...&quot;</span>);</span><br><span class="line">        color.applyColor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>RefinedShapeTriangle.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefinedShapeTriangle</span> <span class="keyword">extends</span> <span class="title class_">AbstractShape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RefinedShapeTriangle</span><span class="params">(ColorImplementor color)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">applyShapeColor</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Triangle color applying...&quot;</span>);</span><br><span class="line">        color.applyColor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>ConcreteColorRed.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteColorRed</span> <span class="keyword">implements</span> <span class="title class_">ColorImplementor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">applyColor</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Applying Red....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>ConcreteColorGreen.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteColorGreen</span> <span class="keyword">implements</span> <span class="title class_">ColorImplementor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">applyColor</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Apply Green...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>ShapeColorTester.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShapeColorTester</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建Triangle实例并应用红色</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Apply Red Color to the Triangle&quot;</span>);</span><br><span class="line">        <span class="type">AbstractShape</span> <span class="variable">triangle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RefinedShapeTriangle</span>(<span class="keyword">new</span> <span class="title class_">ConcreteColorRed</span>());</span><br><span class="line">        triangle.applyShapeColor();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建Triangle实例并应用绿色</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Appying Green Color to the Triangle&quot;</span>);</span><br><span class="line">        <span class="type">AbstractShape</span> <span class="variable">triagleGreen</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RefinedShapeTriangle</span>(<span class="keyword">new</span> <span class="title class_">ConcreteColorGreen</span>());</span><br><span class="line">        triagleGreen.applyShapeColor();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建Circle实例并应用红色</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Appying Red Color to the Circle&quot;</span>);</span><br><span class="line">        <span class="type">AbstractShape</span> <span class="variable">circleRed</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RefinedShapeCircle</span>(<span class="keyword">new</span> <span class="title class_">ConcreteColorRed</span>());</span><br><span class="line">        circleRed.applyShapeColor();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建Circle实例并应用绿色</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Applying Green Color to the Circle&quot;</span>);</span><br><span class="line">        <span class="type">AbstractShape</span> <span class="variable">circleGreen</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RefinedShapeCircle</span>(<span class="keyword">new</span> <span class="title class_">ConcreteColorGreen</span>());</span><br><span class="line">        circleGreen.applyShapeColor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Apply</span> <span class="built_in">Red</span> <span class="variable">Color</span> <span class="variable">to</span> <span class="variable">the</span> <span class="built_in">Triangle</span></span><br><span class="line"><span class="built_in">Triangle</span> <span class="variable">color</span> <span class="variable">applying</span><span class="operator">...</span><span class="variable">Applying</span> <span class="built_in">Red</span><span class="operator">....</span></span><br><span class="line"><span class="variable">Appying</span> <span class="built_in">Green</span> <span class="variable">Color</span> <span class="variable">to</span> <span class="variable">the</span> <span class="built_in">Triangle</span></span><br><span class="line"><span class="built_in">Triangle</span> <span class="variable">color</span> <span class="variable">applying</span><span class="operator">...</span><span class="built_in">Apply</span> <span class="built_in">Green</span><span class="operator">...</span></span><br><span class="line"><span class="variable">Appying</span> <span class="built_in">Red</span> <span class="variable">Color</span> <span class="variable">to</span> <span class="variable">the</span> <span class="built_in">Circle</span></span><br><span class="line"><span class="built_in">Circle</span> <span class="variable">color</span> <span class="variable">applying</span><span class="operator">...</span></span><br><span class="line"><span class="variable">Applying</span> <span class="built_in">Red</span><span class="operator">....</span></span><br><span class="line"><span class="variable">Applying</span> <span class="built_in">Green</span> <span class="variable">Color</span> <span class="variable">to</span> <span class="variable">the</span> <span class="built_in">Circle</span></span><br><span class="line"><span class="built_in">Circle</span> <span class="variable">color</span> <span class="variable">applying</span><span class="operator">...</span></span><br><span class="line"><span class="built_in">Apply</span> <span class="built_in">Green</span><span class="operator">...</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="何时使用桥接模式"><a href="#何时使用桥接模式" class="headerlink" title="何时使用桥接模式"></a>何时使用桥接模式</h3><ul><li>当需要取消抽象和实现之间的永久绑定或紧密耦合时。 在这种情况下，实现可以在运行时选择或切换</li><li>需要通过子类分别扩展抽象和复合实现时。</li><li>什么时候扩展实现中的更改不应影响客户端</li><li>当系统中有几类类别的分层传播时</li></ul><h3 id="桥接设计模式的优势"><a href="#桥接设计模式的优势" class="headerlink" title="桥接设计模式的优势"></a>桥接设计模式的优势</h3><ul><li>桥接模式允许两个抽象系统和实现者系统之间的独立变化</li><li>它避免了客户端代码绑定到某个实现</li><li>抽象和实现可以清楚地分开，便于将来扩展</li><li>为跨平台开发提供了很好的解决方案</li><li>非常适合在初始开发周期中使用存根进行测试</li></ul><h3 id="桥接设计模式的缺点"><a href="#桥接设计模式的缺点" class="headerlink" title="桥接设计模式的缺点"></a>桥接设计模式的缺点</h3><ul><li>如果可扩展组件的数量增加，此模式可能会导致复杂性</li><li>消息不清晰可能导致性能问题</li></ul><h3 id="桥接器和适配器模式之间的区别"><a href="#桥接器和适配器模式之间的区别" class="headerlink" title="桥接器和适配器模式之间的区别"></a>桥接器和适配器模式之间的区别</h3><p>适配器用于消除已定义的系统与现有的两个系统之间的不兼容性，而桥接模式则用于在开发系统之前解决所有困难</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/3b8ea6ca-5a0c-4ef1-a587-76511d899a90&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://chivalry727.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="桥接模式" scheme="https://chivalry727.github.io/tags/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Bridge Design Pattern" scheme="https://chivalry727.github.io/tags/Bridge-Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之责任链模式</title>
    <link href="https://chivalry727.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chivalry727.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-09-15T07:28:23.000Z</published>
    <updated>2025-02-26T12:07:19.476Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/user-attachments/assets/0a5bd2fd-b5ed-491c-9dd0-71de84efb5d9"></p><span id="more"></span><h2 id="设计模式之责任链模式"><a href="#设计模式之责任链模式" class="headerlink" title="设计模式之责任链模式"></a>设计模式之责任链模式</h2><h3 id="什么是责任链设计模式"><a href="#什么是责任链设计模式" class="headerlink" title="什么是责任链设计模式"></a>什么是责任链设计模式</h3><p>责任链设计模式是行为设计模式之一。责任链模式用于实现软件设计中的松散耦合，其中将来自客户端的请求传递给对象链以对其进行处理。 然后，链中的对象将自行决定将由谁处理请求，以及是否需要将请求发送到链中的下一个对象。</p><h3 id="JDK中的责任链模式示例"><a href="#JDK中的责任链模式示例" class="headerlink" title="JDK中的责任链模式示例"></a>JDK中的责任链模式示例</h3><p>让我们看一下JDK中的责任链模式示例，然后我们将继续实施这种模式的真实示例。 我们知道在try-catch块代码中可以有多个catch块。 在这里，每个catch块都是一种处理器，用于处理该特定异常。因此，当try块中发生任何异常时，它将发送到第一个catch块进行处理。 如果catch块无法处理它，则将请求转发到链中的下一个对象，即下一个catch块。 如果即使最后一个catch块也无法处理它，则将异常抛出到调用程序的链外。</p><h3 id="责任链设计模式示例"><a href="#责任链设计模式示例" class="headerlink" title="责任链设计模式示例"></a>责任链设计模式示例</h3><p>责任链模式的一个很好的例子是ATM分配机。 用户输入要分配的金额，并根据已定义的货币清单（例如50$，20$，10$等）输入机器分配的金额。</p><p>如果用户输入的金额不是10的倍数，则会引发错误。 我们将使用责任链模式来实现此解决方案。 链将按照下图所示的顺序处理请求。</p><p><img src="https://tva3.sinaimg.cn/large/008aQ1h9ly1giw4oiwfr1j30cl0c63yu.jpg"></p><p>请注意，我们可以在一个程序本身中轻松实现此解决方案，但是复杂性将增加，并且解决方案将紧密耦合。 因此，我们将创建一个分配系统链，以分配50美元，20美元和10美元的钞票。</p><h3 id="责任链设计模式–基类和接口"><a href="#责任链设计模式–基类和接口" class="headerlink" title="责任链设计模式–基类和接口"></a>责任链设计模式–基类和接口</h3><p>我们可以创建一个Currency类，该类将存储要分配的金额并由链实现使用。</p><p><strong><em>Currency.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 货币</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-19 18:22:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Currency</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> amount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Currency</span><span class="params">(<span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.amount = amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAmount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> amount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本接口应具有定义链中下一个处理器的方法以及将处理请求的方法。 我们的ATM分配界面如下所示。</p><p><strong><em>DispenseChain.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分配链</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-19 18:22:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DispenseChain</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置下一个分配链</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nextChain</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setNextChain</span><span class="params">(DispenseChain nextChain)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分配</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> currency</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dispense</span><span class="params">(Currency currency)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="责任链模式–链实现"><a href="#责任链模式–链实现" class="headerlink" title="责任链模式–链实现"></a>责任链模式–链实现</h3><p>我们需要创建不同的处理器类，这些类将实现<code>DispenseChain</code>接口并提供<code>Dispense()</code>方法的实现。 由于我们正在开发可使用三种类型的货币法案（50美元，20美元和10美元）的系统，因此我们将创建三种具体的实现。</p><p><strong><em>Dollar50Dispenser.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-19 18:28:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dollar50Dispenser</span> <span class="keyword">implements</span> <span class="title class_">DispenseChain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DispenseChain chain;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNextChain</span><span class="params">(DispenseChain nextChain)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.chain = nextChain;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispense</span><span class="params">(Currency currency)</span> &#123;</span><br><span class="line">        <span class="comment">// 处理50以上的货币</span></span><br><span class="line">        <span class="keyword">if</span> (currency.getAmount() &gt;= <span class="number">50</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> currency.getAmount() / <span class="number">50</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">remainder</span> <span class="operator">=</span> currency.getAmount() % <span class="number">50</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;Dispensing &quot;</span> + num + <span class="string">&quot; 50$ note.&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (remainder != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.chain.dispense(<span class="keyword">new</span> <span class="title class_">Currency</span>(remainder));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 交给下一个链路处理</span></span><br><span class="line">            <span class="built_in">this</span>.chain.dispense(currency);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>Dollar20Dispenser.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chivalry.design.patterns.chain.responsibility;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-19 18:34:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dollar20Dispenser</span> <span class="keyword">implements</span> <span class="title class_">DispenseChain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DispenseChain chain;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNextChain</span><span class="params">(DispenseChain nextChain)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.chain = nextChain;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispense</span><span class="params">(Currency cur)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur.getAmount() &gt;= <span class="number">20</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> cur.getAmount() / <span class="number">20</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">remainder</span> <span class="operator">=</span> cur.getAmount() % <span class="number">20</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;Dispensing &quot;</span> + num + <span class="string">&quot; 20$ note&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (remainder != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.chain.dispense(<span class="keyword">new</span> <span class="title class_">Currency</span>(remainder));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.chain.dispense(cur);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>Dollar10Dispenser.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chivalry.design.patterns.chain.responsibility;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-19 18:36:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dollar10Dispenser</span> <span class="keyword">implements</span> <span class="title class_">DispenseChain</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> DispenseChain chain;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNextChain</span><span class="params">(DispenseChain nextChain)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.chain = nextChain;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispense</span><span class="params">(Currency cur)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur.getAmount() &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> cur.getAmount() / <span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">remainder</span> <span class="operator">=</span> cur.getAmount() % <span class="number">10</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;Dispensing &quot;</span> + num + <span class="string">&quot; 10$ note&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (remainder != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.chain.dispense(<span class="keyword">new</span> <span class="title class_">Currency</span>(remainder));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.chain.dispense(cur);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要注意的重要点是分配方法的实现。 您会注意到，每个实现都尝试处理该请求，并且根据数量，它可能会处理部分或全部请求。</p><p>如果链中的一个不能完全处理它，它将请求发送到链中的下一个处理器以处理剩余的请求。 如果处理器无法处理任何内容，它只会将相同的请求转发到下一个链。</p><h3 id="责任链设计模式–创建链"><a href="#责任链设计模式–创建链" class="headerlink" title="责任链设计模式–创建链"></a>责任链设计模式–创建链</h3><p>这是非常重要的一步，我们应该小心的创建链，否则处理器可能根本不会收到任何请求。 例如，在我们的实现中，如果我们将第一个处理器链保留为<code>Dollar10Dispenser</code>，然后将其保留为<code>Dollar20Dispenser</code>，则该请求将永远不会转发到第二个处理器，并且该链将变得无用。</p><p>这是我们的ATM自动提款机实施方案，用于处理用户请求的金额。</p><p><strong><em>ATMDispenseChain.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ATM机责任链模式示例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-19 18:39:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ATMDispenseChain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DispenseChain chainFirst;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ATMDispenseChain</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// initialize the chain</span></span><br><span class="line">        chainFirst = <span class="keyword">new</span> <span class="title class_">Dollar50Dispenser</span>();</span><br><span class="line">        <span class="type">DispenseChain</span> <span class="variable">chain2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dollar20Dispenser</span>();</span><br><span class="line">        <span class="type">DispenseChain</span> <span class="variable">chain3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dollar10Dispenser</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// set the chain of responsibility</span></span><br><span class="line">        chainFirst.setNextChain(chain2);</span><br><span class="line">        chain2.setNextChain(chain3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispense</span><span class="params">(Currency currency)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.chainFirst.dispense(currency);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ATMDispenseChain</span> <span class="variable">atmDispenseChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ATMDispenseChain</span>();</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Enter amount to dispense.&quot;</span>);</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="type">int</span> <span class="variable">amount</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (amount % <span class="number">10</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Amount should be in multiple of 10s.&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// process the request</span></span><br><span class="line">            atmDispenseChain.dispense(<span class="keyword">new</span> <span class="title class_">Currency</span>(amount));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们在应用程序上方运行时，我们将得到如下输出。</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Enter amount to dispense.</span><br><span class="line"><span class="number">120</span></span><br><span class="line">Dispensing <span class="number">2</span> <span class="number">50</span><span class="string">$ </span>note.</span><br><span class="line">Dispensing <span class="number">1</span> <span class="number">20</span><span class="string">$ </span>note</span><br><span class="line">Enter amount to dispense.</span><br><span class="line"><span class="number">150</span></span><br><span class="line">Dispensing <span class="number">3</span> <span class="number">50</span><span class="string">$ </span>note.</span><br><span class="line">Enter amount to dispense.</span><br><span class="line"><span class="number">80</span></span><br><span class="line">Dispensing <span class="number">1</span> <span class="number">50</span><span class="string">$ </span>note.</span><br><span class="line">Dispensing <span class="number">1</span> <span class="number">20</span><span class="string">$ </span>note</span><br><span class="line">Dispensing <span class="number">1</span> <span class="number">10</span><span class="string">$ </span>note</span><br><span class="line">Enter amount to dispense.</span><br><span class="line"><span class="number">70</span></span><br><span class="line">Dispensing <span class="number">1</span> <span class="number">50</span><span class="string">$ </span>note.</span><br><span class="line">Dispensing <span class="number">1</span> <span class="number">20</span><span class="string">$ </span>note</span><br><span class="line">Enter amount to dispense.</span><br><span class="line"><span class="number">6</span></span><br><span class="line">Amount should be in multiple <span class="keyword">of</span> <span class="number">10</span>s.</span><br></pre></td></tr></table></figure><h3 id="责任链设计模式类图"><a href="#责任链设计模式类图" class="headerlink" title="责任链设计模式类图"></a>责任链设计模式类图</h3><p>我们的ATM责任链设计模式实现的分配示例如下图所示：</p><p><img src="https://tva2.sinaimg.cn/large/008aQ1h9ly1giw5jh1wljj30g709lq36.jpg"></p><h3 id="责任链设计模式要点"><a href="#责任链设计模式要点" class="headerlink" title="责任链设计模式要点"></a>责任链设计模式要点</h3><ul><li>客户不知道链中的哪一部分将处理请求，它将把请求发送到链中的第一个对象。 例如，在我们的程序中，<code>ATMDispenseChain</code>不知道是谁在处理分配输入金额的请求。</li><li>链中的每个对象都有其自己的实现来处理请求（全部或部分请求）或将其发送到链中的下一个对象。</li><li>链中的每个对象都应引用链中的下一个对象，以将请求转发至该对象</li><li>创建链的过程非常重要，否则可能会导致请求永远不会转发到特定处理器，或者链中没有能够处理该请求的对象。 在我的实现中，我添加了对用户输入金额的检查，以确保所有处理器都对它进行了完全处理，但如果请求到达最后一个对象并且链中没有其他对象，我们可能不会检查并抛出异常将请求转发给。 这是设计决定。</li><li>责任链设计模式可以很好地实现失去耦合，但是如果大多数代码在所有实现中都是通用的，那么它就有许多实现类和维护问题的权衡。</li></ul><h3 id="JDK中的责任链模式示例-1"><a href="#JDK中的责任链模式示例-1" class="headerlink" title="JDK中的责任链模式示例"></a>JDK中的责任链模式示例</h3><ul><li><code>java.util.logging.Logger#log()</code></li><li><code>javax.servlet.Filter#doFilter()</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/0a5bd2fd-b5ed-491c-9dd0-71de84efb5d9&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://chivalry727.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="责任链模式" scheme="https://chivalry727.github.io/tags/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Chain of Responsibility Design Pattern" scheme="https://chivalry727.github.io/tags/Chain-of-Responsibility-Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之访问者模式</title>
    <link href="https://chivalry727.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chivalry727.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-09-15T07:27:55.000Z</published>
    <updated>2025-02-27T11:06:18.812Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/user-attachments/assets/6678324b-1791-418b-8c94-812b238b1419"></p><span id="more"></span><h2 id="设计模式之访问者模式"><a href="#设计模式之访问者模式" class="headerlink" title="设计模式之访问者模式"></a>设计模式之访问者模式</h2><h3 id="什么是访问者模式"><a href="#什么是访问者模式" class="headerlink" title="什么是访问者模式"></a>什么是访问者模式</h3><p>访客设计模式是行为设计模式之一。当我们必须对一组相似类型的对象执行操作时，将使用访问者模式。 借助访问者模式，我们可以将操作逻辑从对象移动到另一个类。</p><p>例如，考虑一个购物车，我们可以在其中添加不同类型的项目（元素）。 当我们点击结帐按钮时，它将计算要支付的总金额。 现在，我们可以将计算逻辑包含在项目类中，或者可以使用访问者模式将此逻辑移到另一个类中。 让我们在访问者模式示例中实现此功能。</p><h3 id="访问者设计模式Java示例"><a href="#访问者设计模式Java示例" class="headerlink" title="访问者设计模式Java示例"></a>访问者设计模式Java示例</h3><p>为了实现访客模式，首先我们将创建要在购物车中使用的不同类型的项目（元素）。</p><p><strong><em>ItemElement.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-19 18:55:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ItemElement</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">accept</span><span class="params">(ShoppingCartVisitor visitor)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，<code>accept()</code>方法采用<code>Visitor</code>参数。 我们可以有一些其他的方法也特定于项目，但是为了简单起见，我并没有讨论太多细节，而只关注访问者模式。</p><p>让我们为不同类型的项目创建一些具体的类。</p><p><strong><em>Book.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Book</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-19 19:01:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> <span class="keyword">implements</span> <span class="title class_">ItemElement</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> price;</span><br><span class="line">    <span class="keyword">private</span> String isbnNumber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(<span class="type">int</span> price, String isbnNumber)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">        <span class="built_in">this</span>.isbnNumber = isbnNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getIsbnNumber</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isbnNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">accept</span><span class="params">(ShoppingCartVisitor visitor)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> visitor.visit(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>Fruit.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Fruit</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-19 19:02:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fruit</span> <span class="keyword">implements</span> <span class="title class_">ItemElement</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> pricePerKg;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> weight;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Fruit</span><span class="params">(<span class="type">int</span> pricePerKg, <span class="type">int</span> weight, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pricePerKg = pricePerKg;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPricePerKg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pricePerKg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">accept</span><span class="params">(ShoppingCartVisitor visitor)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> visitor.visit(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意具体类中<code>accept()</code>方法的实现，它调用<code>Visitor</code>的<code>visit()</code>方法并将其自身作为参数传递。</p><p>我们在<code>Visitor</code>界面中有针对不同类型项目的<code>visit()</code>方法，将由具体的访问者类实现。</p><p><strong><em>ShoppingCartVisitor.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 访问者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-19 18:55:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ShoppingCartVisitor</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">visit</span><span class="params">(ItemElement element)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，我们将实现访问者，并且每个项目都有其自己的逻辑来计算费用。</p><p><strong><em>ShoppingCartVisitorImpl.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 访问者实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-19 19:04:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCartVisitorImpl</span> <span class="keyword">implements</span> <span class="title class_">ShoppingCartVisitor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">visit</span><span class="params">(ItemElement element)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cost</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// apply 5$ discount if book price is greater than 50</span></span><br><span class="line">        <span class="keyword">if</span> (element <span class="keyword">instanceof</span> Book) &#123;</span><br><span class="line">            <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> (Book) element;</span><br><span class="line">            <span class="keyword">if</span> (book.getPrice() &gt; <span class="number">50</span>) &#123;</span><br><span class="line">                cost = book.getPrice() - <span class="number">5</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cost = book.getPrice();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;Book ISBN:: &quot;</span> + book.getIsbnNumber() + <span class="string">&quot; cost = &quot;</span> + cost);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// fruit</span></span><br><span class="line">        <span class="keyword">if</span> (element <span class="keyword">instanceof</span> Fruit) &#123;</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">fruit</span> <span class="operator">=</span> (Fruit) element;</span><br><span class="line">            cost = fruit.getPricePerKg() + fruit.getWeight();</span><br><span class="line">            System.out.println(fruit.getName() + <span class="string">&quot; cost = &quot;</span> + cost);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让我们看看如何在客户端应用程序中使用访问者模式示例。</p><p><strong><em>ShoppingCartClient.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-19 19:08:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCartClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// items</span></span><br><span class="line">        ItemElement[] items = <span class="keyword">new</span> <span class="title class_">ItemElement</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">20</span>, <span class="string">&quot;1234&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">100</span>, <span class="string">&quot;5678&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="number">10</span>, <span class="number">2</span>, <span class="string">&quot;Banana&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="number">5</span>, <span class="number">5</span>, <span class="string">&quot;Apple&quot;</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// total price</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> calculatePrice(items);</span><br><span class="line">        System.out.println(<span class="string">&quot;Total Cost = &quot;</span> + total);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculatePrice</span><span class="params">(ItemElement[] items)</span> &#123;</span><br><span class="line">        <span class="type">ShoppingCartVisitor</span> <span class="variable">visitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShoppingCartVisitorImpl</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (ItemElement item : items) &#123;</span><br><span class="line">            sum += item.accept(visitor);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们在访问者模式客户端程序之上运行时，我们得到以下输出。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Book</span> ISBN:: <span class="number">1234</span> cost = <span class="number">20</span></span><br><span class="line"><span class="attribute">Book</span> ISBN:: <span class="number">5678</span> cost = <span class="number">95</span></span><br><span class="line"><span class="attribute">Banana</span> cost = <span class="number">12</span></span><br><span class="line"><span class="attribute">Apple</span> cost = <span class="number">10</span></span><br><span class="line"><span class="attribute">Total</span> Cost = <span class="number">137</span></span><br></pre></td></tr></table></figure><p>请注意，所有项目中的<code>accept()</code>方法的实现都是相同的，但可以有所不同，例如，可以使用逻辑检查项目是否可用，然后根本不调用<code>visit()</code>方法。</p><h3 id="访问者设计模式类图"><a href="#访问者设计模式类图" class="headerlink" title="访问者设计模式类图"></a>访问者设计模式类图</h3><p>我们的访问者设计模式实现的类图是：</p><p><img src="https://tva1.sinaimg.cn/large/008aQ1h9ly1giw6hkegmrj30nr0ck0tf.jpg"></p><h3 id="访问者模式的好处"><a href="#访问者模式的好处" class="headerlink" title="访问者模式的好处"></a>访问者模式的好处</h3><p>这种模式的好处是，如果操作逻辑发生变化，那么我们仅需要在访问者实现中进行更改，而无需在所有项目类中进行更改。</p><p>另一个好处是，将新项目添加到系统很容易，它仅需要在访问者界面和实现中进行更改，而现有项目类将不受影响。</p><h3 id="访问者模式限制"><a href="#访问者模式限制" class="headerlink" title="访问者模式限制"></a>访问者模式限制</h3><p>访客模式的缺点在于，在设计时我们应该知道<code>visit()</code>方法的返回类型，否则我们将不得不更改接口及其所有实现。 另一个缺点是，如果访问者接口的实现过多，则很难扩展。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/6678324b-1791-418b-8c94-812b238b1419&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://chivalry727.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="访问者模式" scheme="https://chivalry727.github.io/tags/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Visitor Design Pattern" scheme="https://chivalry727.github.io/tags/Visitor-Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之享元模式</title>
    <link href="https://chivalry727.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chivalry727.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-09-15T07:27:31.000Z</published>
    <updated>2025-02-27T11:12:32.974Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/user-attachments/assets/6fcd94d4-064e-45fc-9838-c5f5ca7eac7d"></p><span id="more"></span><h2 id="设计模式之享元模式"><a href="#设计模式之享元模式" class="headerlink" title="设计模式之享元模式"></a>设计模式之享元模式</h2><p>今天，我们将研究Flyweight设计模式。</p><h3 id="什么是享元设计模式"><a href="#什么是享元设计模式" class="headerlink" title="什么是享元设计模式"></a>什么是享元设计模式</h3><p>享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，例如<code>Facade</code>模式，<code>Adapter</code>模式和<code>Decorator</code>模式。它提供了减少对象数量从而改善应用所需的对象结构的方式。并且使用共享有效地支持大量细粒度的对象。</p><p>当我们需要创建一个类的许多对象时，可以使用Flyweight设计模式。 由于每个对象都会占用对于低内存设备（例如移动设备或嵌入式系统）至关重要的内存空间，因此可以应用轻量级设计模式来通过共享对象来减少内存负载。</p><h3 id="享元设计模式使用场景"><a href="#享元设计模式使用场景" class="headerlink" title="享元设计模式使用场景"></a>享元设计模式使用场景</h3><p>在应用flyweight设计模式之前，我们需要考虑以下因素：</p><ul><li>应用程序要创建的对象数量应该很大。</li><li>对象的创建占用大量内存，并且也很耗时。</li><li>对象属性可以分为内部属性和外部属性，对象的外部属性应由客户端程序定义。</li></ul><p>要应用flyweight模式，我们需要将Object属性分为内部属性和外部属性。 内部属性使对象唯一，而外部属性由客户端代码设置并用于执行不同的操作。 例如，<code>Circle</code>对象可以具有外部属性，例如颜色和宽度。</p><p>为了应用flyweight模式，我们需要创建一个<code>Flyweight factory</code>工厂来返回共享对象。 对于我们的示例，假设我们需要使用线条和椭圆形创建图形。 因此，我们将有一个<code>Shape</code>界面及其具体实现，如<code>Line</code>和<code>Oval</code>。 椭圆类将具有固有属性，以确定是否用给定的颜色填充椭圆，而<code>Line</code>将不具有任何固有属性。</p><h3 id="Flyweight设计模式代码示例"><a href="#Flyweight设计模式代码示例" class="headerlink" title="Flyweight设计模式代码示例"></a>Flyweight设计模式代码示例</h3><p><strong><em>Shape.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.Graphics;</span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 图形接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-19 19:36:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绘画方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> g</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> width</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> height</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> color</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(Graphics g, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> width, <span class="type">int</span> height, Color color)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>Line.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.Graphics;</span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-19 19:37:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Line</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Line</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Creating Line object.&quot;</span>);</span><br><span class="line">        <span class="comment">// adding time delay</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(Graphics line, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> width, <span class="type">int</span> height, Color color)</span> &#123;</span><br><span class="line">        line.setColor(color);</span><br><span class="line">        line.drawLine(x, y, width, height);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>Oval.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.Graphics;</span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 椭圆形</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-19 19:37:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Oval</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * intrinsic property</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> fill;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Oval</span><span class="params">(<span class="type">boolean</span> fill)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fill = fill;</span><br><span class="line">        System.out.println(<span class="string">&quot;Creating Oval object with fill = &quot;</span> + fill);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// adding time delay</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(Graphics circle, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> width, <span class="type">int</span> height, Color color)</span> &#123;</span><br><span class="line">        circle.setColor(color);</span><br><span class="line">        circle.drawOval(x, y, width, height);</span><br><span class="line">        <span class="keyword">if</span> (fill) &#123;</span><br><span class="line">            circle.fillOval(x, y, width, height);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，我在创建具体类的对象时故意引入了延迟，以使flyweight模式可用于实例化时花费大量时间的对象。</p><h3 id="Flyweight-Factory"><a href="#Flyweight-Factory" class="headerlink" title="Flyweight Factory"></a>Flyweight Factory</h3><p>flyweight工厂将由客户端程序用来实例化Object，因此我们需要在工厂中保留一个Object映射，客户端应用程序不应访问该Map。</p><p>每当客户端程序调用以获取Object的实例时，都应从<code>HashMap</code>返回它，如果找不到，则创建一个新的Object并放入Map中，然后返回它。 我们需要确保在创建对象时考虑所有固有属性。</p><p>我们的flyweight工厂类看起来像下面的代码。</p><p><strong><em>ShapeFactory.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 图形工厂方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-19 19:44:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShapeFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;ShapeType, Shape&gt; SHAPES = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Shape <span class="title function_">getShape</span><span class="params">(ShapeType type)</span> &#123;</span><br><span class="line">        <span class="type">Shape</span> <span class="variable">shape</span> <span class="operator">=</span> SHAPES.get(type);</span><br><span class="line">        <span class="keyword">if</span> (shape == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (type.equals(ShapeType.OVAL_FILL)) &#123;</span><br><span class="line">                shape = <span class="keyword">new</span> <span class="title class_">Oval</span>(<span class="literal">true</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(ShapeType.OVAL_NOFILL)) &#123;</span><br><span class="line">                shape = <span class="keyword">new</span> <span class="title class_">Oval</span>(<span class="literal">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(ShapeType.LINE)) &#123;</span><br><span class="line">                shape = <span class="keyword">new</span> <span class="title class_">Line</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            SHAPES.put(type, shape);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> shape;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，在<code>getShape()</code>方法中将<code>Java Enum</code>用于类型安全，<code>Java Composition</code>（形状映射）和<code>Factory</code>模式。</p><p><strong><em>ShapeType.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ShapeType</span> &#123;</span><br><span class="line">    OVAL_FILL,</span><br><span class="line">    OVAL_NOFILL,</span><br><span class="line">    LINE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Flyweight设计模式客户端示例"><a href="#Flyweight设计模式客户端示例" class="headerlink" title="Flyweight设计模式客户端示例"></a>Flyweight设计模式客户端示例</h3><p>下面是使用flyweight模式实现的示例程序。</p><p><strong><em>DrawingClient.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-19 19:49:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DrawingClient</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">1350200437285282550L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ShapeType[] shapes = &#123;ShapeType.LINE, ShapeType.OVAL_FILL, ShapeType.OVAL_NOFILL&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Color[] colors = &#123;Color.RED, Color.GREEN, Color.YELLOW&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DrawingClient</span><span class="params">(<span class="type">int</span> width, <span class="type">int</span> height)</span> <span class="keyword">throws</span> HeadlessException &#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">        <span class="type">Container</span> <span class="variable">contentPane</span> <span class="operator">=</span> getContentPane();</span><br><span class="line"></span><br><span class="line">        <span class="type">JButton</span> <span class="variable">startButton</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;Draw&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">JPanel</span> <span class="variable">panel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line"></span><br><span class="line">        contentPane.add(panel, BorderLayout.CENTER);</span><br><span class="line">        contentPane.add(startButton, BorderLayout.SOUTH);</span><br><span class="line">        setSize(width, height);</span><br><span class="line">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        startButton.addActionListener(e -&gt; &#123;</span><br><span class="line">            <span class="type">Graphics</span> <span class="variable">g</span> <span class="operator">=</span> panel.getGraphics();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                <span class="type">Shape</span> <span class="variable">shape</span> <span class="operator">=</span> ShapeFactory.getShape(getRandomShape());</span><br><span class="line">                shape.draw(g, getRandomX(), getRandomY(), getRandomWidth(), getRandomHeight(), getRandomColor());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ShapeType <span class="title function_">getRandomShape</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> shapes[(<span class="type">int</span>) (Math.random() * shapes.length)];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getRandomX</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) (Math.random() * width);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getRandomY</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) (Math.random() * height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getRandomWidth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) (Math.random() * (width / <span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getRandomHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) (Math.random() * (height / <span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Color <span class="title function_">getRandomColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> colors[(<span class="type">int</span>) (Math.random() * colors.length)];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DrawingClient</span> <span class="variable">drawingClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DrawingClient</span>(<span class="number">500</span>, <span class="number">600</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我已经使用随机数生成在框架中生成不同类型的Shape。</p><p>如果在客户端程序上运行，您会注意到创建第一个Line和Oval对象时填充为true和false的延迟。 之后，由于程序使用共享库，因此程序将快速执行。</p><p>多次单击“绘制”按钮后，框架如下图所示。</p><p><img src="https://tva4.sinaimg.cn/large/008aQ1h9ly1giw80pdgaaj30dc0ggabb.jpg"></p><p>并且您将在命令行中看到以下输出，确认已共享对象。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Creating</span> <span class="type">Oval</span> <span class="class"><span class="keyword">object</span> <span class="keyword">with</span> <span class="title">fill</span> </span>= <span class="literal">false</span></span><br><span class="line"><span class="type">Creating</span> <span class="type">Line</span> <span class="keyword">object</span>.</span><br><span class="line"><span class="type">Creating</span> <span class="type">Oval</span> <span class="class"><span class="keyword">object</span> <span class="keyword">with</span> <span class="title">fill</span> </span>= <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="JDK中的Flyweight设计模式示例"><a href="#JDK中的Flyweight设计模式示例" class="headerlink" title="JDK中的Flyweight设计模式示例"></a>JDK中的Flyweight设计模式示例</h3><p>所有包装器类的<code>valueOf()</code>方法都使用缓存的对象，这些对象显示了Flyweight设计模式的使用。 最好的示例是<code>Java String</code>类<code>String Pool</code>实现。</p><h3 id="Flyweight设计模式要点"><a href="#Flyweight设计模式要点" class="headerlink" title="Flyweight设计模式要点"></a>Flyweight设计模式要点</h3><ul><li>在我们的示例中，没有强制客户端代码使用Flyweight工厂创建对象，但是我们可以强制这样做以确保客户端代码使用Flyweight模式实现，但这是针对特定应用程序的完整设计决策。</li><li>Flyweight模式引入了复杂性，如果共享对象的数量巨大，那么内存和时间之间就需要进行权衡，因此我们需要根据我们的要求明智地使用它。</li><li>当Object的固有属性数量巨大时，Flyweight模式实现就没有用，这使得Factory类的实现变得复杂。</li></ul><p>这就是Java中的Flyweight设计模式。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/6fcd94d4-064e-45fc-9838-c5f5ca7eac7d&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://chivalry727.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="享元模式" scheme="https://chivalry727.github.io/tags/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Flyweight Design Pattern" scheme="https://chivalry727.github.io/tags/Flyweight-Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之组合模式</title>
    <link href="https://chivalry727.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chivalry727.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-09-15T07:27:04.000Z</published>
    <updated>2025-02-27T11:08:25.364Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/user-attachments/assets/89a020a9-1726-424a-9ac0-0a224fad96c7"></p><span id="more"></span><h2 id="设计模式之组合模式"><a href="#设计模式之组合模式" class="headerlink" title="设计模式之组合模式"></a>设计模式之组合模式</h2><h3 id="什么是组合模式"><a href="#什么是组合模式" class="headerlink" title="什么是组合模式"></a>什么是组合模式</h3><p>组合模式是结构设计模式之一。 当我们必须表示部分整个层次时，将使用组合设计模式。</p><p>组合模式是结构设计模式之一。 当我们必须表示部分整个层次时，将使用组合设计模式。</p><p>让我们用一个真实的例子来理解它–图表是由诸如圆形，直线，三角形等对象组成的结构。当我们用颜色（例如红色）填充图形时，相同的颜色也将应用于对象中。 画画。 在这里，绘图由不同的部分组成，它们都具有相同的操作。</p><p>组合模式包含以下对象：</p><ol><li><strong>Base Component</strong>：基本组件是合成中所有对象的接口，客户端程序使用基本组件来处理合成中的对象。 它可以是接口，也可以是抽象类，并且所有对象都可以使用某些方法。</li><li><strong>Leaf</strong>：定义组合中元素的行为。 它是构成的基础，并实现了基本组件。 它没有引用其他组件。</li><li><strong>Composite</strong>：它由叶元素组成，并在基本组件中实现操作。</li></ol><p>在这里，我正在为绘图方案应用组合设计模式。</p><h3 id="组合设计模式基础组件"><a href="#组合设计模式基础组件" class="headerlink" title="组合设计模式基础组件"></a>组合设计模式基础组件</h3><p>组合模式基础组件定义了叶子和组合材料的常用方法。 我们可以使用draw（<code>String fillColor</code>）方法创建一个<code>Shape</code>类，以使用给定的颜色绘制形状。</p><p><strong><em>Shape.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(String fillColor)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组合设计模式叶对象"><a href="#组合设计模式叶对象" class="headerlink" title="组合设计模式叶对象"></a>组合设计模式叶对象</h3><p>组合设计模式叶实现了基础组件，而这些是组合的基础。 我们可以创建多个叶子对象，例如Triangle，Circle等。</p><p><strong><em>Triangle.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Triangle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(String fillColor)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Drawing Triangle with color &quot;</span> + fillColor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>Circle.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(String fillColor)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Drawing Circle with color &quot;</span> + fillColor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组合模式对象"><a href="#组合模式对象" class="headerlink" title="组合模式对象"></a>组合模式对象</h3><p>一个组合对象包含一组叶子对象，我们应该提供一些辅助方法来从该组中添加或删除叶子。 我们还可以提供一种从组中删除所有元素的方法。</p><p><strong><em>Drawing.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-19 20:30:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Drawing</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Collection of Shapes</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Shape&gt; shapes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(String fillColor)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Shape shape : shapes) &#123;</span><br><span class="line">            shape.draw(fillColor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Shape shape)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.shapes.add(shape);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Shape shape)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.shapes.remove(shape);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Clearing all the shapes from drawing.&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.shapes.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，<code>Composite</code>也实现了<code>component</code>，并且行为类似于leaf，只是它可以包含一组leaf元素。</p><h3 id="组合模式类图"><a href="#组合模式类图" class="headerlink" title="组合模式类图"></a>组合模式类图</h3><p><img src="https://tva3.sinaimg.cn/large/008aQ1h9ly1giw8o4tfs6j30j40f2jrt.jpg"></p><p>我们的组合模式实现已准备就绪，我们可以使用客户端程序对其进行测试。</p><h3 id="组合设计模式客户程序"><a href="#组合设计模式客户程序" class="headerlink" title="组合设计模式客户程序"></a>组合设计模式客户程序</h3><p><strong><em>TestCompositePattern.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCompositePattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// create instance</span></span><br><span class="line">        <span class="type">Shape</span> <span class="variable">tri</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Triangle</span>();</span><br><span class="line">        <span class="type">Shape</span> <span class="variable">tri1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Triangle</span>();</span><br><span class="line">        <span class="type">Shape</span> <span class="variable">cir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Drawing</span> <span class="variable">drawing</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Drawing</span>();</span><br><span class="line">        drawing.add(tri1);</span><br><span class="line">        drawing.add(tri1);</span><br><span class="line">        drawing.add(cir);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// draw shape</span></span><br><span class="line">        drawing.draw(<span class="string">&quot;Red&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// clear</span></span><br><span class="line">        drawing.clear();</span><br><span class="line"></span><br><span class="line">        drawing.add(tri);</span><br><span class="line">        drawing.add(cir);</span><br><span class="line">        drawing.draw(<span class="string">&quot;Green&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述组合模式客户端程序的输出为：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">Drawing</span> <span class="built_in">Triangle</span> <span class="variable">with</span> <span class="variable">color</span> <span class="built_in">Red</span></span><br><span class="line"><span class="variable">Drawing</span> <span class="built_in">Triangle</span> <span class="variable">with</span> <span class="variable">color</span> <span class="built_in">Red</span></span><br><span class="line"><span class="variable">Drawing</span> <span class="built_in">Circle</span> <span class="variable">with</span> <span class="variable">color</span> <span class="built_in">Red</span></span><br><span class="line"><span class="variable">Clearing</span> <span class="variable">all</span> <span class="variable">the</span> <span class="variable">shapes</span> <span class="variable">from</span> <span class="variable">drawing</span><span class="operator">.</span></span><br><span class="line"><span class="variable">Drawing</span> <span class="built_in">Triangle</span> <span class="variable">with</span> <span class="variable">color</span> <span class="built_in">Green</span></span><br><span class="line"><span class="variable">Drawing</span> <span class="built_in">Circle</span> <span class="variable">with</span> <span class="variable">color</span> <span class="built_in">Green</span></span><br></pre></td></tr></table></figure><h3 id="组合设计模式要点"><a href="#组合设计模式要点" class="headerlink" title="组合设计模式要点"></a>组合设计模式要点</h3><ul><li>仅当对象组应表现为单个对象时，才应应用组合模式。</li><li>组合设计模式可用于创建树状结构。</li></ul><p><code>java.awt.Container#add(Component)</code>是Java中<code>Composite</code>模式的一个很好的例子，在Swing中使用了很多。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/89a020a9-1726-424a-9ac0-0a224fad96c7&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://chivalry727.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="组合模式" scheme="https://chivalry727.github.io/tags/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Composite Design Pattern" scheme="https://chivalry727.github.io/tags/Composite-Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之原型模式</title>
    <link href="https://chivalry727.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chivalry727.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-09-15T07:16:54.000Z</published>
    <updated>2025-02-27T11:11:05.347Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/user-attachments/assets/41370493-28df-40c8-902f-258e030d1640"></p><span id="more"></span><h2 id="设计模式之原型模式"><a href="#设计模式之原型模式" class="headerlink" title="设计模式之原型模式"></a>设计模式之原型模式</h2><h3 id="什么是原型模式？"><a href="#什么是原型模式？" class="headerlink" title="什么是原型模式？"></a>什么是原型模式？</h3><p>原型模式是<a href="https://zh.wikipedia.org/wiki/%E5%89%B5%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F">创建型模式</a>的一种，其特点在于通过“复制”一个已经存在的<a href="https://zh.wikipedia.org/wiki/%E5%AE%9E%E4%BE%8B">实例</a>来返回新的实例，而不是新建实例。被复制的实例就是我们所称的“原型”，这个原型是可定制的。</p><p>原型模式多用于创建复杂的或者耗时的实例，因为这种情况下，复制一个已经存在的实例使程序运行更高效；或者创建值相等，只是命名不一样的同类数据。因此它提供了一种对象创建机制。</p><p>当创建对象的事务非常昂贵并且需要大量时间和资源并且您已经存在类似的对象时，可以使用原型设计模式。</p><h3 id="原型模式类图"><a href="#原型模式类图" class="headerlink" title="原型模式类图"></a>原型模式类图</h3><p><img src="https://tvax2.sinaimg.cn/large/008aQ1h9ly1girg3rftmbj32800vvwgm.jpg"></p><p>描述原型设计模式的<a href="https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80">UML</a>类图。</p><h3 id="原型模式示例"><a href="#原型模式示例" class="headerlink" title="原型模式示例"></a>原型模式示例</h3><p>用一个例子很容易理解原型设计模式。 假设我们有一个从数据库加载数据的对象。 现在，我们需要在程序中多次修改此数据，因此使用new关键字创建Object并再次从数据库中加载所有数据不是一个好主意。</p><p>更好的方法是将现有对象克隆到新对象中，然后进行数据操作。</p><p>原型设计模式要求您要复制的对象应提供复制功能。 不应由其他任何类完成。 但是，使用对象属性的浅拷贝还是深拷贝取决于要求及其设计决策。</p><p>这是一个示例程序，显示了Java中的原型设计模式示例。</p><p><strong><em>Employees.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 员工类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-15 16:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employees</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; empList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employees</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.empList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employees</span><span class="params">(List&lt;String&gt; empList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.empList = empList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadDate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 从数据库中读取所有员工并放入列表</span></span><br><span class="line">        empList.add(<span class="string">&quot;Lisa&quot;</span>);</span><br><span class="line">        empList.add(<span class="string">&quot;David&quot;</span>);</span><br><span class="line">        empList.add(<span class="string">&quot;Allen&quot;</span>);</span><br><span class="line">        empList.add(<span class="string">&quot;Helen&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getEmpList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Employees</span>(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="built_in">this</span>.getEmpList()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：覆盖<code>clone()</code>方法以提供雇员列表的深拷贝。</p><h3 id="测试原型模式"><a href="#测试原型模式" class="headerlink" title="测试原型模式"></a>测试原型模式</h3><p>这是原型设计模式示例测试程序，将显示原型模式的好处：</p><p><strong><em>PrototypePatternTest.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试原型模式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-15 16:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrototypePatternTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="comment">// 创建 Employees 实例</span></span><br><span class="line">        <span class="type">Employees</span> <span class="variable">employees</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employees</span>();</span><br><span class="line">        <span class="comment">// 加载数据</span></span><br><span class="line">        employees.loadDate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 clone方法来获取 Employees对象</span></span><br><span class="line">        <span class="type">Employees</span> <span class="variable">empsNew</span> <span class="operator">=</span> (Employees) employees.clone();</span><br><span class="line">        <span class="type">Employees</span> <span class="variable">empsNew1</span> <span class="operator">=</span> (Employees) employees.clone();</span><br><span class="line">        List&lt;String&gt; list = empsNew.getEmpList();</span><br><span class="line">        list.add(<span class="string">&quot;John&quot;</span>);</span><br><span class="line">        List&lt;String&gt; list1 = empsNew1.getEmpList();</span><br><span class="line">        list1.remove(<span class="string">&quot;David&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;employees List: &quot;</span>+ employees.getEmpList());</span><br><span class="line">        System.out.println(<span class="string">&quot;empsNew List: &quot;</span> + list);</span><br><span class="line">        System.out.println(<span class="string">&quot;empsNew1 List: &quot;</span> + list1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上原型设计模式示例程序的输出为：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">employees List: [<span class="type">Lisa</span>, <span class="type">David</span>, <span class="type">Allen</span>, <span class="type">Helen</span>]</span><br><span class="line">empsNew List: [<span class="type">Lisa</span>, <span class="type">David</span>, <span class="type">Allen</span>, <span class="type">Helen</span>, <span class="type">John</span>]</span><br><span class="line">empsNew1 List: [<span class="type">Lisa</span>, <span class="type">Allen</span>, <span class="type">Helen</span>]</span><br></pre></td></tr></table></figure><p>如果未提供对象克隆，我们将必须进行数据库调用以每次获取员工列表。 然后进行那些本来会很耗资源和时间的操作。这就是Java中的原型设计模式。</p><h3 id="原型模式的优点"><a href="#原型模式的优点" class="headerlink" title="原型模式的优点"></a>原型模式的优点</h3><ul><li>向客户隐藏制造新实例的复杂性</li><li>提供让客户能够产生未知类型对象的选项</li><li>在某些环境下，复制对象比创建对象更有效</li></ul><h3 id="原型模式的用途"><a href="#原型模式的用途" class="headerlink" title="原型模式的用途"></a>原型模式的用途</h3><ul><li>在一个复杂的类层次中，当系统必须从其中的许多类型创建新对象时，可以考虑原型模式</li><li>对象构建成本很高，我们可以将对象的克隆用于将来使用</li><li>可以减少构建新对象的昂贵数据库调用</li><li>需要在动态加载时在运行时实例化类时</li><li>当对象创建复杂且耗时时需要</li><li>当需要将对象组成，创建和表示与客户端应用程序分离时</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/41370493-28df-40c8-902f-258e030d1640&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://chivalry727.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="原型模式" scheme="https://chivalry727.github.io/tags/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Prototype Design Pattern" scheme="https://chivalry727.github.io/tags/Prototype-Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Java RMI</title>
    <link href="https://chivalry727.github.io/Java%20RMI/"/>
    <id>https://chivalry727.github.io/Java%20RMI/</id>
    <published>2020-09-13T02:58:42.000Z</published>
    <updated>2025-02-27T11:21:18.975Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/user-attachments/assets/b970dc4d-cdfd-4f18-b8f0-fd4a6f18e115"></p><span id="more"></span><h2 id="Java-RMI"><a href="#Java-RMI" class="headerlink" title="Java RMI"></a>Java RMI</h2><h3 id="什么是Java-RMI"><a href="#什么是Java-RMI" class="headerlink" title="什么是Java RMI"></a>什么是Java RMI</h3><p><strong>Java远程方法调用</strong>，即<strong>Java RMI</strong>（Java Remote Method Invocation）是<a href="https://zh.wikipedia.org/wiki/Java">Java</a>编程语言里，一种用于实现<a href="https://zh.wikipedia.org/wiki/%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8">远程过程调用</a>的<a href="https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%BC%96%E7%A8%8B%E6%8E%A5%E5%8F%A3">应用程序编程接口</a>。它使客户机上运行的程序可以调用远程服务器上的对象。远程方法调用特性使Java编程人员能够在网络环境中分布操作。RMI全部的宗旨就是尽可能简化远程接口对象的使用。</p><p>Java RMI极大地依赖于接口。在需要创建一个远程对象的时候，程序员通过传递一个接口来隐藏底层的实现细节。客户端得到的远程对象句柄正好与本地的根代码连接，由后者负责透过网络通信。这样一来，开发者只需关心如何通过自己的接口句柄发送消息。</p><p>接口的两种常见实现方式是：最初使用<a href="https://zh.wikipedia.org/wiki/JRMP">JRMP</a>（Java Remote Message Protocol，Java远程消息交换协议）实现；此外还可以用与<a href="https://zh.wikipedia.org/wiki/CORBA">CORBA</a>兼容的方法实现。<strong>RMI</strong>一般指的是编程接口，也有时候同时包括JRMP和API（<a href="https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%BC%96%E7%A8%8B%E6%8E%A5%E5%8F%A3">应用程序编程接口</a>），而<a href="https://zh.wikipedia.org/w/index.php?title=RMI-IIOP&action=edit&redlink=1">RMI-IIOP</a>则一般指RMI接口接管绝大部分的功能，以支持<a href="https://zh.wikipedia.org/wiki/CORBA">CORBA</a>的实现。</p><p>最初的RMI API设计为通用地支持不同形式的接口实现。后来，CORBA增加了传值（pass by value）功能，以实现RMI接口。然而<a href="https://zh.wikipedia.org/w/index.php?title=RMI-IIOP&action=edit&redlink=1">RMI-IIOP</a>和<a href="https://zh.wikipedia.org/wiki/JRMP">JRMP</a>实现的接口并不完全一致。</p><p>所使用Java包的名字是<code>java.rmi</code>。</p><h3 id="RMI应用程序的概念"><a href="#RMI应用程序的概念" class="headerlink" title="RMI应用程序的概念"></a>RMI应用程序的概念</h3><p>RMI应用程序可以分为两部分，<strong>客户端</strong>程序和<strong>服务器</strong>程序。一个<strong>服务器</strong>程序创建一些远程对象，使其可用于客户端的引用调用方法就可以了。一个<strong>客户端</strong>的远程程序申请数据服务器和调用它们的方法的对象。<strong>存根</strong>和<strong>骨架</strong>是用于与远程对象通信的两个重要对象。</p><h3 id="Stub（存根）"><a href="#Stub（存根）" class="headerlink" title="Stub（存根）"></a>Stub（存根）</h3><p>在RMI中，<code>Stub</code>是一个对象，用作客户端的网关。 所有传出的请求都通过它发送。 当客户端在存根对象上调用该方法时，将在内部执行以下操作：</p><ol><li>使用远程虚拟机建立连接。</li><li>然后，它将参数传输到远程虚拟机。 这也称为法警</li><li>在第二步之后，它将等待输出。</li><li>现在，它读取作为输出来的值或异常。</li><li>最后，它将值返回给客户端。</li></ol><h3 id="Skeleton（骨架）"><a href="#Skeleton（骨架）" class="headerlink" title="Skeleton（骨架）"></a>Skeleton（骨架）</h3><p>在RMI中，<code>Skeleton</code>是一个对象，用作服务器端的网关，所有传入的请求都通过它发送。 当服务器在<code>Skeleton</code>对象上调用该方法时，将在内部执行以下操作：</p><ol><li>读取所有参数以获取远程方法。</li><li>该方法在远程对象上调用。</li><li>然后，它写入并传输结果的参数。</li></ol><p><img src="https://github.com/user-attachments/assets/1fd59185-125d-4cdb-b942-1779a77b59b6"></p><h3 id="Stub-和-Skeleton"><a href="#Stub-和-Skeleton" class="headerlink" title="Stub 和 Skeleton"></a>Stub 和 Skeleton</h3><p><code>Stub</code>充当客户端程序的网关。 它位于客户端，并与Skeleton对象通信。 它建立远程对象之间的连接并向其发送请求。</p><p><img src="https://github.com/user-attachments/assets/39cce3ec-7e83-4fec-9af4-780b79eab1ca"></p><p><code>Skeleton</code>对象驻留在服务器程序上。 它负责将请求从存根传递到远程对象。</p><h3 id="创建一个简单RMI应用示例步骤"><a href="#创建一个简单RMI应用示例步骤" class="headerlink" title="创建一个简单RMI应用示例步骤"></a>创建一个简单RMI应用示例步骤</h3><ol><li>定义一个远程接口。</li><li>实现远程接口。</li><li>创建并启动远程应用程序</li><li>创建并启动客户端应用程序</li></ol><h3 id="定义一个远程接口"><a href="#定义一个远程接口" class="headerlink" title="定义一个远程接口"></a>定义一个远程接口</h3><p>远程接口指定客户端可以远程调用的方法。 客户端程序与远程接口通信，而不是与实现它的类通信。 要成为远程接口，接口必须扩展<code>java.rmi</code>包的<code>Remote</code>接口。</p><p><strong><em>Remote 接口</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.rmi;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The &lt;code&gt;Remote&lt;/code&gt; interface serves to identify interfaces whose</span></span><br><span class="line"><span class="comment"> * methods may be invoked from a non-local virtual machine.  Any object that</span></span><br><span class="line"><span class="comment"> * is a remote object must directly or indirectly implement this interface.</span></span><br><span class="line"><span class="comment"> * Only those methods specified in a &quot;remote interface&quot;, an interface that</span></span><br><span class="line"><span class="comment"> * extends &lt;code&gt;java.rmi.Remote&lt;/code&gt; are available remotely.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Implementation classes can implement any number of remote interfaces and</span></span><br><span class="line"><span class="comment"> * can extend other remote implementation classes.  RMI provides some</span></span><br><span class="line"><span class="comment"> * convenience classes that remote object implementations can extend which</span></span><br><span class="line"><span class="comment"> * facilitate remote object creation.  These classes are</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;java.rmi.server.UnicastRemoteObject&lt;/code&gt; and</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;java.rmi.activation.Activatable&lt;/code&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;For complete details on RMI, see the &lt;a</span></span><br><span class="line"><span class="comment"> * href=&quot;&#123;<span class="doctag">@docRoot</span>&#125;/../specs/rmi/index.html&quot;&gt;RMI Specification&lt;/a&gt; which</span></span><br><span class="line"><span class="comment"> * describes the RMI API and system.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>   1.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  Ann Wollrath</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     java.rmi.server.UnicastRemoteObject</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     java.rmi.activation.Activatable</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Remote</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="创建远程接口"><a href="#创建远程接口" class="headerlink" title="创建远程接口"></a>创建远程接口</h3><p><strong><em>AddServiceInterface.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 远程接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-13 16:41:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AddServiceInterface</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现远程接口"><a href="#实现远程接口" class="headerlink" title="实现远程接口"></a>实现远程接口</h3><p>为了实现远程接口，类必须扩展<code>UnicastRemoteObject</code>或使用<code>UnicastRemoteObject</code>类的<code>exportObject()</code>方法。</p><p><strong><em>Adder.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 远程接口实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-13 16:43:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Adder</span> <span class="keyword">implements</span> <span class="title class_">AddServiceInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建-RegistryServer服务"><a href="#创建-RegistryServer服务" class="headerlink" title="创建 RegistryServer服务"></a>创建 RegistryServer服务</h3><p>RMI注册表是一个放置所有服务器对象的名称空间。 每次服务器创建一个对象时，它将向RMIregistry注册该对象（使用bind() 或reBind() 方法）。 这些使用唯一的名称（称为绑定名称）注册。</p><p>要调用远程对象，客户端需要该对象的引用。 那时，客户端使用其绑定名称（使用lookup() 方法）从注册表中获取对象。</p><p>下图说明了整个过程：</p><p><img src="https://github.com/user-attachments/assets/85000957-685e-45b3-968b-5e602a0b2a57"></p><p><strong><em>RegistryServer.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册中心的实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-16 15:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegistryServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            LocateRegistry.createRegistry(<span class="number">8000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;registry start...&quot;</span>);</span><br><span class="line">            <span class="comment">// 阻塞 RegistryServer</span></span><br><span class="line">            System.in.read();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建AddServer服务"><a href="#创建AddServer服务" class="headerlink" title="创建AddServer服务"></a>创建AddServer服务</h3><p>需要创建一个服务器应用程序并在其中托管rmi服务<code>Adder</code>。 这是使用<code>java.rmi.Naming</code>类的<code>rebind()</code>方法完成的。 <code>rebind</code>方法带有两个参数，第一个表示对象引用的名称，第二个参数是对<code>Adder</code>实例的引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Server</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-13 16:49:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">AddServiceInterface</span> <span class="variable">addService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Adder</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 导出服务，使用5000端口</span></span><br><span class="line">            <span class="type">AddServiceInterface</span> <span class="variable">skeleton</span> <span class="operator">=</span> (AddServiceInterface) UnicastRemoteObject.exportObject(addService, <span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取 Registry</span></span><br><span class="line">            <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8000</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 注册 Skeleton 服务</span></span><br><span class="line">            registry.bind(<span class="string">&quot;AddService&quot;</span>, skeleton);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException | AlreadyBoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建客户端程序"><a href="#创建客户端程序" class="headerlink" title="创建客户端程序"></a>创建客户端程序</h3><p>客户端应用程序包含一个Java程序，该程序调用Naming类的<code>lookup()</code>方法。 此方法接受一个参数rmi URL，并返回对<code>AddServerInterface</code>类型的对象的引用。 所有远程方法调用都在此对象上完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.NotBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-13 16:52:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取注册中心</span></span><br><span class="line">            <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8000</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//  查找远程服务</span></span><br><span class="line">            <span class="type">AddServiceInterface</span> <span class="variable">stub</span> <span class="operator">=</span> (AddServiceInterface) registry.lookup(<span class="string">&quot;AddService&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 访问远程服务</span></span><br><span class="line">            System.out.println(<span class="string">&quot;result = &quot;</span> + stub.sum(<span class="number">5</span>, <span class="number">5</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NotBoundException | RemoteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RMI-的目标"><a href="#RMI-的目标" class="headerlink" title="RMI 的目标"></a>RMI 的目标</h3><ul><li>为了最小化应用程序的复杂性。</li><li>为了保持类型安全。</li><li>分布式垃圾回收。</li><li>最小化使用本地对象和远程对象之间的差异。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Java RMI是远程过程调用（RPC）的纯Java解决方案，用于在Java中创建分布式应用程序。Stub和Skeleton对象用于客户端和服务器端之间的通信。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/b970dc4d-cdfd-4f18-b8f0-fd4a6f18e115&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java技术" scheme="https://chivalry727.github.io/categories/Java%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java RMI" scheme="https://chivalry727.github.io/tags/Java-RMI/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之代理模式</title>
    <link href="https://chivalry727.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chivalry727.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-09-13T02:58:13.000Z</published>
    <updated>2025-02-27T11:11:34.466Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/user-attachments/assets/f1fec24a-536d-432f-907b-6ac179f24b47"></p><span id="more"></span><h2 id="设计模式之代理模式"><a href="#设计模式之代理模式" class="headerlink" title="设计模式之代理模式"></a>设计模式之代理模式</h2><h3 id="代理模式简介"><a href="#代理模式简介" class="headerlink" title="代理模式简介"></a>代理模式简介</h3><p>代理设计模式属于结构设计模式类别，它是软件开发中最常用的模式之一。 此模式有助于控制连接资源的使用和访问行为。 称为“代理”的单独对象有助于在客户端和原始服务对象之间建立连接。 因此，代理将充当实际原始对象的替代或占位符对象，尤其是控制访问。 原始服务对象的性质可能是创建过程中的高成本或需要安全访问。 系统的核心行为不会改变，只有内部组件的结构和控制会进行修改以获得更好的结果。</p><p>使用代理模式创建代表（representative）对象，让代理对象控制某对象的访问，被代理的对象是远程的对象、创建开销大的对象或需要安全控制的对象。</p><p>GoF定义，“为另一个对象提供代理或占位符以控制对其的访问”。</p><p>模式引入了替代而不是实际的原始对象来与外部实体进行交互。 您正在通过另一个对象访问该原始对象，同时保留了整个系统的行为。</p><h3 id="现实生活中的例子"><a href="#现实生活中的例子" class="headerlink" title="现实生活中的例子"></a>现实生活中的例子</h3><p>我们可以在金融系统中找到许多代理模式的例子。 信用卡将充当提供相同功能的实际银行界面。 它将充当自动柜员机的提款，支票余额，转账和其他几项便利的工作，这些工作由信用卡代理完成。 另外，支票可以代表个人执行汇款功能。 它是银行批准后从一个人的帐户向另一个人支付特定金额的命令。 在这里，支票充当了一大笔现金的代理。</p><h3 id="面临的问题"><a href="#面临的问题" class="headerlink" title="面临的问题"></a>面临的问题</h3><p>这发生在所需对象不太容易初始化或访问的情况下。 如果该对象驻留在远程库中，或者它消耗大量系统资源，并且客户端仅在特定条件下需要它。 因此，初始化和维护此类对象不是系统的最有效方法。 如果需要在访问实际服务对象时提供其他功能，则将为开发人员带来另一层解决方法。 因此，系统需要找到更好的解决方案来处理这种情况。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>通过引入代理可以解决上述问题：代替昂贵且受保护的实际对象的替代组件。 该代理将包含与原始服务对象相似的接口，并且当它接收到客户端请求时，代理对象将创建原始对象的实例并通过响应进行委托。</p><h3 id="什么是代理？"><a href="#什么是代理？" class="headerlink" title="什么是代理？"></a>什么是代理？</h3><p>代理只是原始对象的替代对象。 它也充当包装器或代理对象，客户端调用该包装器或代理对象以访问后台的原始对象。 代理是一个轻量级对象，它实现与原始实际对象相同的接口，并控制对实际对象的访问。 如果需要，它可以包括其他功能，例如在对实际对象的操作占用大量资源时进行缓存，并在调用实际对象操作之前确保前提条件。</p><p><img src="https://tvax2.sinaimg.cn/large/008aQ1h9ly1gip1yu1bk8j30fn07yglm.jpg"></p><h3 id="为什么我们使用代理？"><a href="#为什么我们使用代理？" class="headerlink" title="为什么我们使用代理？"></a>为什么我们使用代理？</h3><ul><li>代理可以根据需要执行不同的操作。 它可以执行诸如日志记录和过滤请求之类的预处理，然后再移交给原始对象以完成某些前提条件。</li><li> 同样，代理可以在将结果发送回请求者之前执行后处理。 当需要覆盖功能时，可以使用代理。 </li><li>特别是，当需要打破许可证以防止破坏现有的旧系统时，代理将是一个不错的选择。 </li><li>当需要用于资源密集型应用程序的兑现机制以减少网络流量和成本时，代理是不错的选择。 </li><li>当存在昂贵且复杂的安全问题时，代理可用于承受系统的安全操作。</li></ul><h3 id="代理模式变化"><a href="#代理模式变化" class="headerlink" title="代理模式变化"></a>代理模式变化</h3><p>有几种类型的代理模式变化。</p><ul><li>远程代理：顾名思义，这些代理在不同的工作空间上工作。 那是实际的原始对象存在于远程地区。 远程代理充当远程对象的本地代表，因此，客户端不了解原始对象的远程性。 Java RMI技术中的“存根”对象就是这种模式的一个很好的例子。 当客户端需要获取原始对象的服务时，远程原始对象将驻留在其他JVM的堆中，存根将充当代理以交互和调用远程对象的方法。</li><li>虚拟代理：这是节省应用程序成本的一种方法。 在这种情况下，实际原始对象的创建非常昂贵，并且内存和资源消耗很高。 为了避免这种障碍，应用程序引入了虚拟代理。 虚拟代理充当昂贵的原始对象的占位符，并仅在需要时创建原始对象的真实对象。 通过这种方式，虚拟代理可以保存实际对象并在以后的调用中重新使用，从而防止对象重复并节省内存。</li><li>保护代理：该代理为原始对象添加了一层保护。 在这种情况下，原始对象受不同的访问级别保护。 当客户端要访问原始对象时，保护代理将在转发请求之前检查客户端的适当访问级别。</li><li>智能代理：该代理提供了附加的安全层。 它执行其他操作以验证原始对象是安全的，可以避免意外访问和威胁，例如意外处置和删除原始对象，在访问原始对象之前检查原始对象是否已锁定以及在首次将持久对象加载到内存时参考。</li></ul><h3 id="代理设计模式的类图"><a href="#代理设计模式的类图" class="headerlink" title="代理设计模式的类图"></a>代理设计模式的类图</h3><p><img src="https://tvax4.sinaimg.cn/large/008aQ1h9ly1gip28gx6rgj30i40873yj.jpg"></p><h3 id="代理设计模式的组件"><a href="#代理设计模式的组件" class="headerlink" title="代理设计模式的组件"></a>代理设计模式的组件</h3><ul><li>Proxy：控制对真实主题的访问。 代理包含真实主题的实例，并提供与主题相同的接口，以便轻松联系真实主题。 代理类中可以有其他方法来执行中间工作。</li><li>Subject：这是真实主题和代理的通用接口。 因此，代理和真实主题都实现了“主题”界面。 客户端仅与代理进行交互以访问真实主题，因为可以随时使用代理代替真实主题。</li><li>RealSubject：这是实际的原始对象，可以通过代理进行访问。 这可能是网络连接，文件，内存中的大对象或其他昂贵或难以创建的组件</li></ul><h3 id="代理模式如何工作？"><a href="#代理模式如何工作？" class="headerlink" title="代理模式如何工作？"></a>代理模式如何工作？</h3><p>在此模式下，客户端不直接与原始对象进行交互，而是，客户端使用代理对象来调用原始对象。 但是最重要的一点是客户端不了解代理，并且代理的行为与客户端的原始对象相同。</p><h3 id="代理模式示例"><a href="#代理模式示例" class="headerlink" title="代理模式示例"></a>代理模式示例</h3><p>假设在自然公园中有一种非常稀有的动物叫做“海熊”。 并非每个公园游客都可以参观海熊。 只有生物学家，兽医和动物研究人员这样的授权人员才能访问他们。 为了控制这种稀有物种的进入，公园任命了“海洋熊卫队”。 他将评估访问者的详细信息，并酌情控制对海熊的访问。</p><p>让我们以代理模式实现这种情况，并确定相关组件。</p><p><strong><em>SeaBearGuardProxy</em></strong> ：这是SeaBearOriginal类的代理类。</p><p><strong><em>BearProtectInterface</em></strong> : 这是SearBearOriginal和SeaBearGuardProxy类共享的接口，并且包含访问控制机制。</p><p><strong><em>SeaBearOriginal</em></strong> : 这是代表自然公园中稀有动物物种的实际原始类别</p><p><strong><em>NatureParkVisitorClient</em></strong>: 这是来参观海熊的游客客户端</p><h3 id="实现代理模式步骤"><a href="#实现代理模式步骤" class="headerlink" title="实现代理模式步骤"></a>实现代理模式步骤</h3><ol><li>标识实际的原始对象，该对象需要通过代理进行包装。</li><li>确定需要执行哪些步骤来控制对原始对象的访问。</li><li>创建一个可由原始对象和代理实现的合适接口。</li><li>创建具有访问控制机制以及支持代理意图的其他功能的代理。</li><li>创建客户端对象并通过代理访问原始对象</li></ol><h3 id="代理模式代码示例"><a href="#代理模式代码示例" class="headerlink" title="代理模式代码示例"></a>代理模式代码示例</h3><p><strong><em>BearProtectInterface.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主题接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-13 15:45:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BearProtectInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">allowVisit</span><span class="params">(<span class="type">int</span> visitorCode)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>SeaBearGuardProxy.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代理对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-13 15:48:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeaBearGuardProxy</span> <span class="keyword">implements</span> <span class="title class_">BearProtectInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> visitorCode;</span><br><span class="line">    <span class="keyword">private</span> String visitorProfession;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">SeaBearOriginal</span> <span class="variable">seaBear</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SeaBearOriginal</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">allowVisit</span><span class="params">(<span class="type">int</span> visitorCode)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (visitorCode == <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Visitor allowed to see the Sea Bear&quot;</span>);</span><br><span class="line">            seaBear.showSeaBear();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Visitor NOT allowed to see the Sea Bear&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">assignVisitorCode</span><span class="params">(String profession)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (visitorProfession == <span class="string">&quot;Biologist&quot;</span> || visitorProfession == <span class="string">&quot;Vet&quot;</span> || visitorProfession == <span class="string">&quot;Animal Researcher&quot;</span>) &#123;</span><br><span class="line">            visitorCode = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            visitorCode = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>SeaBearOriginal.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原始对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-13 15:49:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeaBearOriginal</span> <span class="keyword">implements</span> <span class="title class_">BearProtectInterface</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">allowVisit</span><span class="params">(<span class="type">int</span> visitorCode)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (visitorCode == <span class="number">1</span> ) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Visitor allowed to see the Sea Bear&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.showSeaBear();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Visitor NOT allowed to see the Sea Bear&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showSeaBear</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;You are welcome to the Sea Bear premisses&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>NatureParkVisitorClient.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-13 15:51:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NatureParkVisitorClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建代理对象</span></span><br><span class="line">        <span class="type">BearProtectInterface</span> <span class="variable">seaBearProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SeaBearGuardProxy</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 调用接口</span></span><br><span class="line">            seaBearProxy.allowVisit(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例代码时序图"><a href="#示例代码时序图" class="headerlink" title="示例代码时序图"></a>示例代码时序图</h3><p><img src="https://tva1.sinaimg.cn/large/008aQ1h9ly1gip2r0b1ycj30i60aoglj.jpg"></p><h3 id="使用代理模式的场景"><a href="#使用代理模式的场景" class="headerlink" title="使用代理模式的场景"></a>使用代理模式的场景</h3><ul><li>当原始对象创建成本很高时</li><li>当原始对象存在于远程环境中时</li><li>当原始对象上的安全控制受到限制时</li><li>在创建原始对象之前和之后需要执行其他操作时</li><li>当按需创建原始对象或系统需要在加载某些资源时延迟</li><li>当原始对象位于旧系统或第三方库中时</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>代理模式为另一个对象提供代表，以便控制客户对对象的访问，管理访问的方式有许多种</li><li>远程代理管理客户和远程对象之间的交互</li><li>虚拟代理控制访问实例化开销大的对象</li><li>保护代理基于调用者控制对对象方法的访问</li><li>代理模式有许多变体，例如：缓存代理、同步代理、防火墙代理和写入时复制代理</li><li>代理在结构上类似装饰者，但是目的不同</li><li>装饰者模式为对象加上行为，而代理则是控制访问</li><li>Java内置的代理支持，可以根据需要建立运行时动态代理，并将所有调用分配到所选的处理器</li><li>就和其他的包装者（wrapper）一样，代理会造成你的设计中类的数目增加</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/f1fec24a-536d-432f-907b-6ac179f24b47&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://chivalry727.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="代理模式" scheme="https://chivalry727.github.io/tags/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Proxy Design Pattern" scheme="https://chivalry727.github.io/tags/Proxy-Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Java Lock之ReentrantLock</title>
    <link href="https://chivalry727.github.io/Java-Lock%E7%A4%BA%E4%BE%8B%E4%B9%8BReentrantLock/"/>
    <id>https://chivalry727.github.io/Java-Lock%E7%A4%BA%E4%BE%8B%E4%B9%8BReentrantLock/</id>
    <published>2020-09-12T01:53:30.000Z</published>
    <updated>2025-02-27T11:26:25.896Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/user-attachments/assets/79f83b3c-bc5c-4bd5-80c9-e63ea97380a7"></p><span id="more"></span><h2 id="Java-Lock之ReentrantLock"><a href="#Java-Lock之ReentrantLock" class="headerlink" title="Java Lock之ReentrantLock"></a>Java Lock之ReentrantLock</h2><h3 id="Java-锁"><a href="#Java-锁" class="headerlink" title="Java 锁"></a>Java 锁</h3><p>通常，在多线程环境时，为了确保线程安全，我们会使用<code>synchronized</code>关键字来保证线程安全。在大多数情况下，<code>synchronized</code>关键字是解决之道，但它由一些缺点，导致我们放弃使用它。Java 1.5 Concurrency API附带了带有接口和一些实现类的<code>java.util.concurrent.locks</code>软件包，<code>Lock</code>以改进对象锁定机制。</p><h3 id="Java-Lock-结构"><a href="#Java-Lock-结构" class="headerlink" title="Java  Lock 结构"></a>Java  Lock 结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Lock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取锁直到当前线程被中断</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 仅在调用时释放锁时才获取锁。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果锁在给定的等待时间内是空闲的，并且当前线程尚未被中断，则获取该锁。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回绑定到此Lock实例的新Condition实例。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Condition <span class="title function_">newCondition</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java Lock API 中的一些重要接口和类：</p><ol><li><p><strong>Lock</strong>：这是Lock API的基本接口。它提供了<code>synchronized</code>关键字的所有功能，并提供了其他方式来创建不同的锁定条件，从而为线程等待锁定提供了超时。一些重要的方法是：lock() 获取锁，unlock() 释放锁，tryLock() 等待锁一定时间，newCondition() 创建Condition 阻塞队列接口等。</p></li><li><p><strong>Condition</strong>：Condition对象类似于<code>Object wait-notify</code>模型，具有附加功能以创建不同的wait集。Condition对象始终由Lock对象创建。一些重要的方法是类似于wait() 和signal() 的await() ，类似于notify() 和notifyAll() 方法的signalAll()。</p></li><li><p><strong>ReadWriteLock</strong>：它包含一对关联的锁，一个用于只读操作，另一个用于写入。只要没有写程序线程，读锁就可以同时由多个读程序线程持有。写锁是排他的。</p></li><li><p><strong>ReentrantLock</strong>：这是Lock接口使用最广泛的实现类。此类以与synchronized关键字相似的方式实现Lock接口。除了Lock接口的实现之外，ReentrantLock还包含一些实用方法来获取持有锁的线程，等待获取锁的线程等。</p><p><code>synchronized</code>同步方法本质上是可重入的，即，如果一个线程在监视对象上具有锁，并且如果另一个同步块需要在同一监视对象上具有锁，则线程可以输入该代码块。我认为这是类名称为ReentrantLock的原因。让我们通过一个简单的示例来了解此功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程安全的类，使用synchronized关键字来保证线程安全</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-12 11:53:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SafeThreadTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        bar();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">bar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// do some more</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果线程输入foo()，则它具有<code>SafeThreadTest</code>对象的锁定，因此，当它尝试执行bar()方法时，由于该线程已经持有<code>SafeThreadTest</code>对象的锁定，因此允许该线程执行bar()方法。</p></li></ol><h3 id="Java-中的-ReentrantLock"><a href="#Java-中的-ReentrantLock" class="headerlink" title="Java 中的  ReentrantLock"></a>Java 中的  ReentrantLock</h3><p><code>ReentrantLock</code>是一个可重入的互斥锁，所谓可重入是线程可以重复获取已经持有的锁。锁基本上都是要支持可重入性，否则很容易出现死锁问题。</p><p><code>ReentrantLock</code>内部实现主要通过<code>AbstractQueuedSynchronizer</code>类实现的，<code>AbstractQueuedSynchronizer</code>是抽象类，在<code>ReentrantLock</code>类中有两个实现类：<code>NonfairSync</code>和<code>FairSync</code>，分别对应非公平锁和公平锁的实现。</p><p>ReentrantLock类内部持有一个Sync类型的变量，主要实现基本上都是调用Sync的实现机制，默认构建的是NonfairSync，即非公平锁，也可以通过带Boolean类型的构造函数构建公平锁，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 1、默认创建的非公平锁，性能更高，等价于ReentrantLock(false)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ReentrantLock</span><span class="params">()</span> &#123;</span><br><span class="line">    sync = <span class="keyword">new</span> <span class="title class_">NonfairSync</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> fair true:公平锁    false:非公平锁</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ReentrantLock</span><span class="params">(<span class="type">boolean</span> fair)</span> &#123;</span><br><span class="line">    sync = fair ? <span class="keyword">new</span> <span class="title class_">FairSync</span>() : <span class="keyword">new</span> <span class="title class_">NonfairSync</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，让我们看一个简单的示例，其中将用Java Lock API替换<code>synchronized</code>关键字。</p><p>假设我们有一个Resource类，其中包含一些我们希望它是线程安全的操作，以及一些不需要线程安全的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Resource</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// do some operation, DB read, write etc</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doLogging</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// logging, no need for thread safety</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，我们有一个<code>Runnable</code>类，在其中我们将使用<code>Resouce</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * synchronized 代码块来保证线程安全</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-12 12:01:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynchronizedLockExample</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Resource resource;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SynchronizedLockExample</span><span class="params">(Resouce resource)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.resource = resource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 数据库读写操作需要线程安全</span></span><br><span class="line">        <span class="keyword">synchronized</span> (resouce) &#123;</span><br><span class="line">            resource.doSomething();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 日志操作，无须线程安全</span></span><br><span class="line">        resource.doLogging();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，我们正在使用同步代码块来获取对Resource对象的锁定，我们可以在类中创建一个虚拟对象，并将其用于锁定目的。</p><p>现在让我们看看如何使用<code>Java Lock API</code>并在不使用<code>synchronized</code>关键字的情况下重写上述程序。我们将在类中使用<code>ReentrantLock</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于Java Lock API &#123;<span class="doctag">@link</span> java.util.concurrent.locks.ReentrantLock&#125; 来实现线程安全的示例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-12 12:05:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcurrencyLockExample</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Resource resource;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Lock lock;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcurrencyLockExample</span><span class="params">(Resource resource)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.resource = resource;</span><br><span class="line">        <span class="comment">// 默认创建非公平锁</span></span><br><span class="line">        <span class="built_in">this</span>.lock = <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 等待获取锁</span></span><br><span class="line">            <span class="keyword">if</span> (lock.tryLock(<span class="number">10</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">                resource.doSomething();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        resource.doLogging();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如您所见，我正在使用tryLock() 方法来确保我的线程仅等待一定的时间，并且如果它没有获得对象的锁，那么它只是在记录并退出。需要注意的另一个重要点是，即使doSomething() 方法调用引发任何异常，也要使用<code>try-finally</code>块来确保释放锁。</p><h3 id="Java-Lock-与-synchronized的区别"><a href="#Java-Lock-与-synchronized的区别" class="headerlink" title="Java Lock 与 synchronized的区别"></a>Java Lock 与 synchronized的区别</h3><p>基于以上程序，我们可以轻松得出Java Lock与<code>synchronized</code>之间的差异：</p><ol><li>Java Lock API提供了更多的锁定可见性和选项，与同步机制不同，同步机制可能导致线程无限期地等待锁定，因此我们可以使用tryLock() 来确保线程仅在特定时间等待。</li><li>同步代码更简洁，易于维护，而使用Lock时，即使在lock() 和unlock() 方法调用之间引发了某些异常，我们也不得不尝试进行最后锁定，以确保释放Lock。</li><li>同步块或方法只能覆盖一个方法，而我们可以使用Lock API在一个方法中获取锁并在另一方法中释放锁。</li><li><code>synchronized</code>关键字不提供公平性，而我们在创建<code>ReentrantLock</code>对象时可以将公平性设置为true，以便等待时间最长的线程首先获得该锁。</li><li>我们可以为Lock创建不同的条件，并且不同的线程可以为不同的条件使用await() 。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Lock机制的核心就是通过cas原子操作AQS中的state属性，state=0表示锁资源可用，获取锁就是通过cas原子操作将state从0设置成1，成功就表示获取锁成功，如果state&gt;0，cas操作将会失败，即表示锁已被占用，当前获取锁失败。获取锁失败，根据是否是可中断、可超时等特性，处理的逻辑不太一致，但大致为：</p><ol><li>将获取锁失败的线程封装成Node，封装成Node一方面是要构建双向队列，另一方面是Node中额外添加状态信息对节点进行控制。</li><li> 在一个for无线循环中通过Lock.park()让线程休眠，当有锁资源被释放发生时，会从队列头到尾的顺序依次唤醒线程(会跳过CANCELLED标记的节点，因为这些节点代表的线程已经无效了)，注意这里只会唤醒一个线程，唤醒的线程只表示该线程具有竞争锁资源的资格，还需要和新申请但还没有放入到Queue中的线程进行竞争该锁资源，这就是非公平锁的特性，这样设计主要是从性能方面考虑，如果竞争成功则退出for循环返回，否则继续进入休眠状态。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/79f83b3c-bc5c-4bd5-80c9-e63ea97380a7&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java技术" scheme="https://chivalry727.github.io/categories/Java%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Lock" scheme="https://chivalry727.github.io/tags/Lock/"/>
    
      <category term="ReentrantLock" scheme="https://chivalry727.github.io/tags/ReentrantLock/"/>
    
  </entry>
  
  <entry>
    <title>Java SPI</title>
    <link href="https://chivalry727.github.io/JavaSPI%E6%9C%BA%E5%88%B6/"/>
    <id>https://chivalry727.github.io/JavaSPI%E6%9C%BA%E5%88%B6/</id>
    <published>2020-09-11T14:12:08.000Z</published>
    <updated>2025-02-27T11:25:24.944Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/user-attachments/assets/316d91ef-6b1a-415d-b712-2707a3ca7b9f"></p><span id="more"></span><h2 id="Java-SPI"><a href="#Java-SPI" class="headerlink" title="Java SPI"></a>Java SPI</h2><h3 id="什么是Java-SPI"><a href="#什么是Java-SPI" class="headerlink" title="什么是Java SPI"></a>什么是Java SPI</h3><p>Java SPI（服务提供者接口）是动态加载服务的机制。通过遵循特定的规则集，我们可以在我们的应用程序中实现Java SPI，并使用ServiceLoader类加载服务。</p><h3 id="Java-SPI-组件"><a href="#Java-SPI-组件" class="headerlink" title="Java SPI 组件"></a>Java SPI 组件</h3><p>SPI实现中包含四个组件：</p><ol><li>服务提供者接口：定义服务提供者实现类的协定的接口或抽象类</li><li>服务提供者：实际提供者的实现类</li><li>SPI配置文件：一个特殊的文件，用于提供查找服务实现的逻辑。文件名必须存在于<strong>META-INF/services</strong>目录中。文件名应与服务提供商接口标准名称完全相同。文件中的每一行都有一个实现服务类详细信息，再次是服务提供者类的完全限定名称。</li><li>ServiceLoader：Java SPI主类，用于为服务提供者接口加载服务。ServiceLoader中有多种实用方法可用于获取特定的实现，对其进行迭代或重新加载服务。</li></ol><h3 id="Java-服务提供者接口示例"><a href="#Java-服务提供者接口示例" class="headerlink" title="Java 服务提供者接口示例"></a>Java 服务提供者接口示例</h3><p><code>java.util.spi</code>软件包提供了许多服务提供者接口，可以将其实现以提供服务。</p><ol><li>ResourceBundleControlProvider：提供<code>ResourceBundle.Control</code>实现的服务提供者的接口。</li><li>LocaleServiceProvider，CalendarDataProvider，CalendarNameProvider，CurrencyNameProvider，TimeZoneNameProvider和LocaleNameProvider：用于实现特定于区域设置的服务提供者。</li></ol><p><img src="https://github.com/user-attachments/assets/ac5d1f5e-2cef-409c-a3ed-912f089f7c12"></p><h3 id="Java-SPI-示例"><a href="#Java-SPI-示例" class="headerlink" title="Java SPI 示例"></a>Java SPI 示例</h3><p>让我们创建SPI的实现，并使用ServiceLoader类加载一些服务。</p><h4 id="服务提供者接口"><a href="#服务提供者接口" class="headerlink" title="服务提供者接口"></a>服务提供者接口</h4><p>假设我们有一个<code>MessageServiceProvider</code>接口，用于定义服务提供者实现发送消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息服务提供者接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-11 23:46:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MessageServiceProvider</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String message)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="服务提供者实现类"><a href="#服务提供者实现类" class="headerlink" title="服务提供者实现类"></a>服务提供者实现类</h4><p>我们希望支持电子邮件和推送通知消息。因此，我们将创建<code>MessageServiceProvider</code>接口的两个服务提供者实现<code>EmailServiceProvider</code>和<code>PushNotificationServiceProvider</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 邮件服务提供者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-11 23:47:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmailServiceProvider</span> <span class="keyword">implements</span> <span class="title class_">MessageServiceProvider</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sending Email with Message = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 推送通知服务提供者实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-11 23:48:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PushNotificationServiceProvider</span> <span class="keyword">implements</span> <span class="title class_">MessageServiceProvider</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sending Push Notification with Message = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="服务提供者配置文件"><a href="#服务提供者配置文件" class="headerlink" title="服务提供者配置文件"></a>服务提供者配置文件</h4><p>必须在<strong>META-INF/services</strong>目录中创建配置文件。其名称应为“ <strong>com.chivalry.spi.message.MessageServiceProvider</strong> ”。我们将在此文件中指定两个实现类。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">com.chivalry.spi.message.EmailServiceProvider</span></span><br><span class="line"><span class="attr">com.chivalry.spi.message.PushNotificationServiceProvider</span></span><br></pre></td></tr></table></figure><h4 id="加载服务的ServiceLoader示例"><a href="#加载服务的ServiceLoader示例" class="headerlink" title="加载服务的ServiceLoader示例"></a>加载服务的ServiceLoader示例</h4><p>最后，我们必须使用ServiceLoader类加载服务。这是一个显示其用法的简单测试程序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ServiceLoader&#125; 加载服务示例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-11 23:53:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceLoaderTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ServiceLoader&lt;MessageServiceProvider&gt; serviceProviders = ServiceLoader.load(MessageServiceProvider.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历调用所有的实现类</span></span><br><span class="line">        <span class="keyword">for</span> (MessageServiceProvider serviceProvider : serviceProviders) &#123;</span><br><span class="line">            serviceProvider.sendMessage(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 Java 8 Optional 获取第一个 service，注意：findFirst()方法是JDK9版本提供的方法</span></span><br><span class="line">        Optional&lt;MessageServiceProvider&gt; firstService = serviceProviders.findFirst();</span><br><span class="line">        firstService.ifPresent(messageServiceProvider -&gt; messageServiceProvider.sendMessage(<span class="string">&quot;Hello Friend&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 Java 8 forEach() 方法</span></span><br><span class="line">        serviceProviders.forEach((service) -&gt; service.sendMessage(<span class="string">&quot;Have a Nice Day!&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 已加载服务总数</span></span><br><span class="line">        System.out.println(serviceProviders.stream().count());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们运行上面的程序时，我们得到以下输出：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Sending Email with Message = Hello</span><br><span class="line">Sending Push Notification with Message = Hello</span><br><span class="line">Sending Email with Message = Hello Friend</span><br><span class="line">Sending Email with Message = Have a Nice Day!</span><br><span class="line">Sending Push Notification with Message = Have a Nice Day!</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>下图显示了我们的最终项目结构和SPI组件：</p><p><img src="https://github.com/user-attachments/assets/3ad86ad6-de26-4026-9deb-afc1fd04da9f"></p><h3 id="ServiceLoader-结构"><a href="#ServiceLoader-结构" class="headerlink" title="ServiceLoader  结构"></a>ServiceLoader  结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JDK11 版本的 ServiceLoader，与JDK8的版本略有差异</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ServiceLoader</span>&lt;S&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;S&gt; &#123;</span><br><span class="line">    <span class="comment">// The class or interface representing the service being loaded</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;S&gt; service;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The class of the service type</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String serviceName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The module layer used to locate providers; null when locating</span></span><br><span class="line">    <span class="comment">// providers using a class loader</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ModuleLayer layer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The class loader used to locate, load, and instantiate providers;</span></span><br><span class="line">    <span class="comment">// null when locating provider using a module layer</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader loader;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The access control context taken when the ServiceLoader is created</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AccessControlContext acc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The lazy-lookup iterator for iterator operations</span></span><br><span class="line">    <span class="keyword">private</span> Iterator&lt;Provider&lt;S&gt;&gt; lookupIterator1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;S&gt; instantiatedProviders = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The lazy-lookup iterator for stream operations</span></span><br><span class="line">    <span class="keyword">private</span> Iterator&lt;Provider&lt;S&gt;&gt; lookupIterator2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Provider&lt;S&gt;&gt; loadedProviders = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> loadedAllProviders; <span class="comment">// true when all providers loaded</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Incremented when reload is called</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> reloadCount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JavaLangAccess LANG_ACCESS;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        LANG_ACCESS = SharedSecrets.getJavaLangAccess();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 可以看出 ServiceLoader 是延迟初始化服务接口实现类的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">LazyClassPathLookupIterator</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;Provider&lt;T&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PREFIX</span> <span class="operator">=</span> <span class="string">&quot;META-INF/services/&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; providerNames = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();  <span class="comment">// to avoid duplicates</span></span><br><span class="line">        Enumeration&lt;URL&gt; configs;</span><br><span class="line">        Iterator&lt;String&gt; pending;</span><br><span class="line"></span><br><span class="line">        Provider&lt;T&gt; nextProvider;</span><br><span class="line">        ServiceConfigurationError nextError;</span><br><span class="line"></span><br><span class="line">        LazyClassPathLookupIterator() &#123; &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让我们看一下ServiceLoader类的重要方法。</p><ul><li>load()：加载特定SPI服务的静态方法。</li><li>findFirst()：返回可用于该服务提供者的第一个服务。</li><li>forEach()：对于在此服务加载器实例中的每个服务提供者运行一些代码很有用。</li><li>stream()：返回此服务加载器中服务提供者的流。</li><li>iterator()：返回服务提供者的迭代器。</li><li>reload()：重新加载服务提供者实现类。当我们即时更改服务提供者实现类的配置并希望重新加载服务列表时，这很有用。</li></ul><h3 id="SPI-在开源框架中的应用"><a href="#SPI-在开源框架中的应用" class="headerlink" title="SPI 在开源框架中的应用"></a>SPI 在开源框架中的应用</h3><ul><li>数据库驱动加载接口实现类的加载：JDBC加载不同类型数据库的驱动</li><li>日志门面接口实现类加载：slf4j加载不同提供商的日志实现类</li><li>Spring中大量使用了SPI，比如：对servlet3.0规范对ServletContainerInitializer的实现、自动类型转换Type Conversion SPI(Converter SPI、Formatter SPI)等</li><li>Dubbo中也大量使用SPI的方式实现框架的扩展, 不过它对Java提供的原生SPI做了封装，允许用户扩展实现Filter接口</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Java SPI提供了一种在我们的应用程序中动态配置和加载服务的简便方法。但是，这在很大程度上取决于服务配置文件，并且文件中的任何更改都可能破坏应用程序。</p><p>使用Java SPI机制的优势是实现解耦，使得第三方服务模块的装配控制的逻辑与调用者的业务代码分离，而不是耦合在一起。应用程序可以根据实际业务情况启用框架扩展或替换框架组件。</p><p>相比使用提供接口jar包，供第三方服务模块实现接口的方式，SPI的方式使得源框架，不必关心接口的实现类的路径，可以不用通过下面的方式获取接口实现类。</p><ul><li>代码硬编码import 导入实现类</li><li>指定类全路径反射获取：例如在JDBC4.0之前，JDBC中获取数据库驱动类需要通过**Class.forName(“com.mysql.jdbc.Driver”)**，类似语句先动态加载数据库相关的驱动，然后再进行获取连接等的操作</li><li>第三方服务模块把接口实现类实例注册到指定地方，源框架从该处访问实例</li></ul><p>通过SPI的方式，第三方服务模块实现接口后，在第三方的项目代码的<code>META-INF/services</code>目录下的配置文件指定实现类的全路径名，框架即可找到实现类。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/ServiceLoader.html">ServiceLoader API文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/316d91ef-6b1a-415d-b712-2707a3ca7b9f&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java技术" scheme="https://chivalry727.github.io/categories/Java%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java SPI" scheme="https://chivalry727.github.io/tags/Java-SPI/"/>
    
  </entry>
  
  <entry>
    <title>面试总结（其他）</title>
    <link href="https://chivalry727.github.io/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93%EF%BC%88%E5%85%B6%E4%BB%96%EF%BC%89/"/>
    <id>https://chivalry727.github.io/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93%EF%BC%88%E5%85%B6%E4%BB%96%EF%BC%89/</id>
    <published>2020-09-10T01:16:48.000Z</published>
    <updated>2025-02-27T11:13:36.032Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/user-attachments/assets/901d8359-470a-466c-9f9a-ab717480529d"></p><span id="more"></span><h2 id="面试总结（其他）"><a href="#面试总结（其他）" class="headerlink" title="面试总结（其他）"></a>面试总结（其他）</h2><h3 id="LinkedHashMap-如何保证有序"><a href="#LinkedHashMap-如何保证有序" class="headerlink" title="LinkedHashMap 如何保证有序"></a>LinkedHashMap 如何保证有序</h3><p>LinkedHashMap继承自HashMap，LinkedHashMap定义了Entry继承自HashMap的Node链表的基础上定义了双向链表来保证顺序，主要是通过双向链表来保证有序的，默认是按照插入顺序，也可以用重载方法的访问顺序来排序</p><h3 id="IO-NIO-AIO-模型"><a href="#IO-NIO-AIO-模型" class="headerlink" title="IO/NIO/AIO 模型"></a>IO/NIO/AIO 模型</h3><h4 id="IO-BIO（Blocking-I-O）"><a href="#IO-BIO（Blocking-I-O）" class="headerlink" title="IO/BIO（Blocking I/O）"></a>IO/BIO（Blocking I/O）</h4><p>同步阻塞I/O模式，数据的读取写入必须阻塞在一个线程内等待其完成。</p><!-- more --><p>BIO通信（一请求一应答）模型图如下：</p><p><img src="https://tva1.sinaimg.cn/large/008aQ1h9ly1gilctcgjxkj310k0ouae4.jpg" alt="WX20200910-103832@2x"></p><h4 id="NIO（Non-Blocking-I-O）"><a href="#NIO（Non-Blocking-I-O）" class="headerlink" title="NIO（Non-Blocking I/O）"></a>NIO（Non-Blocking I/O）</h4><p>NIO是一种同步非阻塞的I/O模型，在Java 1.4 中引入了 NIO 框架，对应 java.nio 包，提供了 Channel , Selector，Buffer等抽象。</p><p>NIO线程模型如下：</p><p><img src="https://tva4.sinaimg.cn/large/008aQ1h9ly1gill3zadb6j312s0eodr2.jpg"></p><h4 id="AIO（Asynchronous-non-blocking-I-O）"><a href="#AIO（Asynchronous-non-blocking-I-O）" class="headerlink" title="AIO（Asynchronous non-blocking I/O）"></a>AIO（Asynchronous non-blocking I/O）</h4><p>AIO 也就是 NIO 2。在 Java 7 中引入了 NIO 的改进版 NIO 2,它是异步非阻塞的IO模型。异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会阻塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。</p><p>AIO 是异步IO的缩写，虽然 NIO 在网络操作中，提供了非阻塞的方法，但是 NIO 的 IO 行为还是同步的。对于 NIO 来说，我们的业务线程是在 IO 操作准备好时，得到通知，接着就由这个线程自行进行 IO 操作，IO操作本身是同步的。</p><p>AIO模型：</p><p><img src="https://tvax4.sinaimg.cn/large/008aQ1h9ly1gillw8dr81j30is0ky3z3.jpg" alt="20150929202423057"></p><h3 id="同步阻塞-同步非阻塞-异步非阻塞是在IO模型中的哪一环节"><a href="#同步阻塞-同步非阻塞-异步非阻塞是在IO模型中的哪一环节" class="headerlink" title="同步阻塞/同步非阻塞/异步非阻塞是在IO模型中的哪一环节"></a>同步阻塞/同步非阻塞/异步非阻塞是在IO模型中的哪一环节</h3><ul><li><p>IO的同步阻塞是在 accept()   read()会进行阻塞</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IO Server 端</span></span><br><span class="line"><span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>();</span><br><span class="line">serverSocket.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">8000</span>))；<span class="comment">// 绑定端口</span></span><br><span class="line"><span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept(); <span class="comment">// 会阻塞</span></span><br><span class="line"></span><br><span class="line">socket.getInputStream().read(); <span class="comment">// 会阻塞</span></span><br></pre></td></tr></table></figure></li><li><p>NIO的同步非阻塞在 accept() 不会阻塞线程，在select()阶段还是会阻塞</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NIO Server 端</span></span><br><span class="line"><span class="type">ServerSocketChannel</span> <span class="variable">serverSocketChannel</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line"><span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br><span class="line">serverSocketChannel.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">8000</span>)); <span class="comment">// 绑定端口</span></span><br><span class="line">serverSocketChannel.configureBlocking(<span class="literal">false</span>); <span class="comment">// 设置非阻塞</span></span><br><span class="line">serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT); <span class="comment">// 注册事件</span></span><br><span class="line"><span class="comment">// 阻塞等待客户端Channel</span></span><br><span class="line">selector.select();</span><br><span class="line"><span class="type">SocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> serverSocketChannel.accept(); <span class="comment">// 非阻塞</span></span><br></pre></td></tr></table></figure></li><li><p>AIO的异步非阻塞在accept() 会直接返回，不会等待</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AIO Server 端</span></span><br><span class="line"><span class="type">AsynchronousServerSocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> AsynchronousServerSocketChannel.open();</span><br><span class="line">socketChannel.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">8080</span>)); <span class="comment">// 绑定端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 非阻塞，等待os回调处理</span></span><br><span class="line">socketChannel.accept(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">CompletionHandler</span>&lt;AsynchronousSocketChannel, Object&gt;() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">completed</span><span class="params">(AsynchronousSocketChannel result, Object attachment)</span> &#123;</span><br><span class="line">    <span class="comment">// 继续监听下一个请求</span></span><br><span class="line">    socketChannel.accept(attachment, <span class="built_in">this</span>);</span><br><span class="line">    <span class="comment">// 处理数据</span></span><br><span class="line">    handler(result);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">failed</span><span class="params">(Throwable exc, Object attachment)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;服务出现异常：&quot;</span> + exc.getMessage());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="GC-Roots-是什么"><a href="#GC-Roots-是什么" class="headerlink" title="GC Roots 是什么"></a>GC Roots 是什么</h3><ul><li>虚拟机栈中引用的对象，比如各线程调用方法堆栈中使用的参数、局部变量、临时变量等</li><li>方法区中类静态属性引用的对象，比如字符串常量池里的引用和Java类的引用类型静态变量</li><li>本地方法栈中JNI引用的对象</li><li>Java虚拟机内部的引用，比如：基本数据类型对应的Class对象，以及一些异常对象（NPE、OOM）等，还有系统类加载器</li><li>所有被同步锁（synchronized关键字）持有的对象</li><li>反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等</li></ul><h3 id="栈空间如何设置大小，栈空间过大会有什么影响"><a href="#栈空间如何设置大小，栈空间过大会有什么影响" class="headerlink" title="栈空间如何设置大小，栈空间过大会有什么影响"></a>栈空间如何设置大小，栈空间过大会有什么影响</h3><p>-Xss128k：设置每个线程的栈大小。JDK5.0以后每个线程栈大小为1M，以前每个线程栈大小为256K。根据应用的线程所需内存大小进行调整。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。随着线程栈的大小越大，能够支持越多的方法调用，也即是能够存储更多的栈帧。</p><p>线程栈的大小是个双刃剑，如果设置过小，可能会出现栈溢出，特别是在该线程内有递归、大的循环时出现溢出的可能性更大；如果该值设置过大，就有影响到创建栈帧的数量，如果是多线程的应用，就会出现内存溢出的错误.</p><h3 id="零拷贝（Zero-Copy）原理"><a href="#零拷贝（Zero-Copy）原理" class="headerlink" title="零拷贝（Zero-Copy）原理"></a>零拷贝（Zero-Copy）原理</h3><p>零拷贝（Zero-copy）技术指在计算机执行操作时，CPU 不需要先将数据从一个内存区域复制到另一个内存区域，从而可以减少上下文切换以及 CPU 的拷贝时间。它的作用是在数据报从网络设备到用户程序空间传递的过程中，减少数据拷贝次数，减少系统调用，实现 CPU 的零参与，彻底消除 CPU 在这方面的负载。实现零拷贝用到的最主要技术是 DMA 数据传输技术和内存区域映射技术。</p><ul><li>零拷贝机制可以减少数据在内核缓冲区和用户进程缓冲区之间反复的 I/O 拷贝操作。</li><li>零拷贝机制可以减少用户进程地址空间和内核地址空间之间因为上下文切换而带来的 CPU 开销。</li></ul><h3 id="CMS-和-G1-的异同"><a href="#CMS-和-G1-的异同" class="headerlink" title="CMS 和 G1 的异同"></a>CMS 和 G1 的异同</h3><p>按分代收集来说，CMS是老年代收集器，G1则是混合收集，它开创了混合收集的模式，衡量标准不在是属于哪个分代，而是哪块内存值得收集，哪块内存中存放的垃圾数量最多，回收收益最大来进行收集。</p><p>按收集算法来说，CMS收集器是基于标记-清除的垃圾收集器，由于CMS是一款基于“标记-清除”算法实现的收集器，就会造成大量空间碎片产生，如果空间碎片过多时，当需要足够大大连续空间来分配大对象大时候，会不得不提前触发Full GC的情况；而G1从整体来看是基于“标记-整理”算法实现的收集器，从局部上看（两个Region之间）又是基于“标记-复制”算法实现，无论如何，这两种算法在运行期间都不会产生内存空间碎片，垃圾收集完成之后能提供规整的可用内存。</p><h3 id="G1-什么时候引发-Full-GC"><a href="#G1-什么时候引发-Full-GC" class="headerlink" title="G1 什么时候引发 Full GC"></a>G1 什么时候引发 Full GC</h3><p><code>G1 Full GC</code>的原因一般有：</p><ul><li><code>Mixed GC</code>赶不上内存分配的速度，只能通过<code>Full GC</code>来释放内存</li><li><code>MetaSpace</code>不足，对于大量使用反射，动态代理的类，由于动态代理的每个类都会生成一个新的类，同时<code>class</code>信息会存放在元空间，因此如果元空间不足，<code>G1</code>会靠<code>Full GC</code>来扩容元空间，这种情况解决方案就是扩大初始元空间大小。</li><li><code>Humongous</code>分配失败，前面说过<code>G1</code>分配大对象时，回收是靠<code>Concurrent Marking</code>或<code>Full GC</code>，因此如果大对象分配失败，则可能会引发<code>Full GC</code></li></ul><h3 id="说一个最熟悉的垃圾回收算法"><a href="#说一个最熟悉的垃圾回收算法" class="headerlink" title="说一个最熟悉的垃圾回收算法"></a>说一个最熟悉的垃圾回收算法</h3><p>可以通过自己熟悉的垃圾回收算法引申一下该算法相应的垃圾收集器实现，比如，<strong>标记–复制</strong>算法，这是 HotSpot 虚拟机新生代垃圾收集器常用的回收算法，对应的实现有 Serial、Parallel Scavenge，在比如<strong>标记–清除</strong>算法，对应的垃圾收集器实现有 CMS 等等。</p><h3 id="吞量优先和响应时间优先的回收器有哪些"><a href="#吞量优先和响应时间优先的回收器有哪些" class="headerlink" title="吞量优先和响应时间优先的回收器有哪些"></a>吞量优先和响应时间优先的回收器有哪些</h3><ul><li>Parallel Scavenge</li><li>Parallel Old</li><li>G1</li></ul><h3 id="怎么判断内存泄漏"><a href="#怎么判断内存泄漏" class="headerlink" title="怎么判断内存泄漏"></a>怎么判断内存泄漏</h3><h3 id="讲一下-CMS-的流程"><a href="#讲一下-CMS-的流程" class="headerlink" title="讲一下 CMS 的流程"></a>讲一下 CMS 的流程</h3><h3 id="为什么压缩指针超过32G失效"><a href="#为什么压缩指针超过32G失效" class="headerlink" title="为什么压缩指针超过32G失效"></a>为什么压缩指针超过32G失效</h3><h3 id="什么是内存泄漏？GC-调优有经验吗？一般出现-GC-问题你怎么解决？"><a href="#什么是内存泄漏？GC-调优有经验吗？一般出现-GC-问题你怎么解决？" class="headerlink" title="什么是内存泄漏？GC 调优有经验吗？一般出现 GC 问题你怎么解决？"></a>什么是内存泄漏？GC 调优有经验吗？一般出现 GC 问题你怎么解决？</h3><h3 id="ThreadLocal-有没有内存泄漏问题"><a href="#ThreadLocal-有没有内存泄漏问题" class="headerlink" title="ThreadLocal 有没有内存泄漏问题"></a>ThreadLocal 有没有内存泄漏问题</h3><h3 id="G1-两个-Region-不是连续的，而且之间还有可达的引用，我现在要回收另一个怎么处理？"><a href="#G1-两个-Region-不是连续的，而且之间还有可达的引用，我现在要回收另一个怎么处理？" class="headerlink" title="G1 两个 Region 不是连续的，而且之间还有可达的引用，我现在要回收另一个怎么处理？"></a>G1 两个 Region 不是连续的，而且之间还有可达的引用，我现在要回收另一个怎么处理？</h3><h3 id="讲一下-JVM-堆内存管理（对象分配过程）"><a href="#讲一下-JVM-堆内存管理（对象分配过程）" class="headerlink" title="讲一下 JVM 堆内存管理（对象分配过程）"></a>讲一下 JVM 堆内存管理（对象分配过程）</h3><h3 id="听说过-CMS-的并发预处理和并发可中断预处理吗"><a href="#听说过-CMS-的并发预处理和并发可中断预处理吗" class="headerlink" title="听说过 CMS 的并发预处理和并发可中断预处理吗"></a>听说过 CMS 的并发预处理和并发可中断预处理吗</h3><h3 id="到底多大的对象会被直接扔到老年代"><a href="#到底多大的对象会被直接扔到老年代" class="headerlink" title="到底多大的对象会被直接扔到老年代"></a>到底多大的对象会被直接扔到老年代</h3><p>JVM虚拟机提供了一个<code>-XX:PretenureSizeThreshold</code>参数，令大于这个设置值的对象直接在老年代分配。这样做的目的是避免在Eden区及两个Survivor区之间发生大量的内存复制。</p><p>所谓的大对象是指，需要大量连续内存空间的Java对象，最典型的大对象就是那种很长的字符串以及数组。</p><p>注意：<code>PretenureSizeThreshold</code>参数只对Serial和ParNew两款收集器有效，Parallel Scavenge收集器不认识这个参数，Parallel Scavenge收集器一般并不需要设置。如果遇到必须使用此参数的场合，可以考虑ParNew加CMS的收集器组合。</p><h3 id="mysql-原子性和持久性怎么保证"><a href="#mysql-原子性和持久性怎么保证" class="headerlink" title="mysql 原子性和持久性怎么保证"></a>mysql 原子性和持久性怎么保证</h3><p>Mysql是利用Innodb的undo log日志来保证原子性的；undo log名为回滚日志，是实现原子性的关键，当事务回滚时能够撤销所有已经成功执行的sql语句，他需要记录你要回滚的相应日志信息redo log</p><p>Mysql是利用Innodb的redo log来保证持久性；当做数据修改的时候，不仅在内存中操作，还会在redo log中记录这次操作。当事务提交的时候，会将redo log日志进行刷盘(redo log一部分在内存中，一部分在磁盘上)。当数据库宕机重启的时候，会将redo log中的内容恢复到数据库中，再根据undo log和binlog内容决定回滚数据还是提交数据</p><h3 id="Mysql-Innodb-和-mylsam-存储引擎区别"><a href="#Mysql-Innodb-和-mylsam-存储引擎区别" class="headerlink" title="Mysql Innodb 和 mylsam 存储引擎区别"></a>Mysql Innodb 和 mylsam 存储引擎区别</h3><table><thead><tr><th align="center">区别</th><th align="center">InnoDB</th><th align="center">MylSam</th></tr></thead><tbody><tr><td align="center">事务</td><td align="center">支持</td><td align="center">不支持</td></tr><tr><td align="center">外键</td><td align="center">支持</td><td align="center">不支持</td></tr><tr><td align="center">锁的粒度</td><td align="center">行锁</td><td align="center">表锁</td></tr><tr><td align="center">索引</td><td align="center">聚集索引</td><td align="center">非聚集索引</td></tr><tr><td align="center">表的具体行数</td><td align="center">不提供</td><td align="center">提供</td></tr><tr><td align="center">CURD操作</td><td align="center">适合insert或update场景</td><td align="center">适合大量select场景</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><h3 id="Innodb-存储引擎的底层数据结构"><a href="#Innodb-存储引擎的底层数据结构" class="headerlink" title="Innodb 存储引擎的底层数据结构"></a>Innodb 存储引擎的底层数据结构</h3><p> 使用的是B+树</p><h3 id="为什么底层使用-B-树不用-B-树"><a href="#为什么底层使用-B-树不用-B-树" class="headerlink" title="为什么底层使用 B+树不用 B 树"></a>为什么底层使用 B+树不用 B 树</h3><p>参考另一个面试总结</p><h3 id="快速排序的算法原理以及时间复杂度"><a href="#快速排序的算法原理以及时间复杂度" class="headerlink" title="快速排序的算法原理以及时间复杂度"></a>快速排序的算法原理以及时间复杂度</h3><p>使用分治法，所有比基准值大的排在右边，小的排在左边，然后两边继续按照这个分治法继续递归，直到完成排序</p><p>时间复杂度：O(n*logn)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/901d8359-470a-466c-9f9a-ab717480529d&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试总结" scheme="https://chivalry727.github.io/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="面试总结" scheme="https://chivalry727.github.io/tags/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之状态模式</title>
    <link href="https://chivalry727.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chivalry727.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-09-06T12:13:34.000Z</published>
    <updated>2025-02-27T11:09:04.299Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/user-attachments/assets/9cb4fe19-db49-4c0a-8751-e26c0367d212"></p><span id="more"></span><h2 id="设计模式之状态模式"><a href="#设计模式之状态模式" class="headerlink" title="设计模式之状态模式"></a>设计模式之状态模式</h2><h3 id="糖果机的需求"><a href="#糖果机的需求" class="headerlink" title="糖果机的需求"></a>糖果机的需求</h3><p>我们公司接到糖果公司的需求，要设计一个糖果机的程序，糖果机有四个状态，未投币，已投币，售出，售罄这四个状态，当客户投币后，就开始转动曲柄，然后发放糖果。当糖果售罄时，就不在允许投入币了。所以希望我们设计能够尽量有弹性而且好维护的程序，在将来有可能增加更多的行为。</p><h3 id="糖果机初版代码实现"><a href="#糖果机初版代码实现" class="headerlink" title="糖果机初版代码实现"></a>糖果机初版代码实现</h3><p>现在我们来实现糖果机。我们知道要利用实例变量持有当前的状态，然后需要处理所有可能发生的动作、行为和状态的转换。我们需要实现的工作包括：投币、退币、转动曲柄和发放糖果；也需要检查糖果是否售罄。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 糖果机</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-06 21:18:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GumballMachine</span> &#123;</span><br><span class="line">    <span class="comment">// 售罄</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SOLD_OUT</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 没有投币</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NO_QUARTER</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 已投币</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">HAS_QUARTER</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 售出</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SOLD</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="comment">// 当前状态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">state</span> <span class="operator">=</span> SOLD_OUT;</span><br><span class="line">    <span class="comment">// 糖果数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GumballMachine</span><span class="params">(<span class="type">int</span> count)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            state = NO_QUARTER;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 投币方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertQuarter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (state == HAS_QUARTER) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;You can&#x27;t insert another quarter.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == NO_QUARTER) &#123;</span><br><span class="line">            state = HAS_QUARTER;</span><br><span class="line">            System.out.println(<span class="string">&quot;You inserted a quarter.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == SOLD_OUT) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;You cant&#x27;t insert a quarter, the machine is sold out.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == SOLD) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Please wait, we&#x27;re already giving you a gumball.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退币方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ejectQuarter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (state == HAS_QUARTER) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Quarter returned.&quot;</span>);</span><br><span class="line">            state = NO_QUARTER;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == NO_QUARTER) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;You haven&#x27;t inserted a quarter.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == SOLD) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Sorry, you already turned the crank.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == SOLD_OUT) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;You can&#x27;t eject, you haven&#x27;t inserted a quarter yet.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转动曲柄方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnCrank</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (state == SOLD) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Turning twice doesn&#x27;t get you another gumball.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == NO_QUARTER) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;You turned but there&#x27;s no quarter.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == SOLD_OUT) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;You turned, but there are no gumballs.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == HAS_QUARTER) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;You turned...&quot;</span>);</span><br><span class="line">            state = SOLD;</span><br><span class="line">            dispense();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发放糖果方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispense</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (state == SOLD) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;A gumball comes rolling out the solt.&quot;</span>);</span><br><span class="line">            count--;</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Oops, out of gumballs.&quot;</span>);</span><br><span class="line">                state = SOLD_OUT;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                state = NO_QUARTER;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == NO_QUARTER) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;You need to pay first.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == SOLD_OUT) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;No gumball dispensed.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == HAS_QUARTER) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;No gumball dispensed.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;GumballMachine&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;state=&quot;</span> + state +</span><br><span class="line">                <span class="string">&quot;, count=&quot;</span> + count +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试糖果机"><a href="#测试糖果机" class="headerlink" title="测试糖果机"></a>测试糖果机</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GumballMachineTestDrive</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建装有5个糖果的糖果机</span></span><br><span class="line">        <span class="type">GumballMachine</span> <span class="variable">gumballMachine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GumballMachine</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印机器状态</span></span><br><span class="line">        System.out.println(gumballMachine);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 投币</span></span><br><span class="line">        gumballMachine.insertQuarter();</span><br><span class="line">        <span class="comment">// 转动曲柄</span></span><br><span class="line">        gumballMachine.turnCrank();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再次打印机器状态</span></span><br><span class="line">        System.out.println(gumballMachine);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 投币</span></span><br><span class="line">        gumballMachine.insertQuarter();</span><br><span class="line">        <span class="comment">// 退币</span></span><br><span class="line">        gumballMachine.ejectQuarter();</span><br><span class="line">        <span class="comment">// 转动曲柄</span></span><br><span class="line">        gumballMachine.turnCrank();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 再次打印机器状态</span></span><br><span class="line">        System.out.println(gumballMachine);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="新的需求"><a href="#新的需求" class="headerlink" title="新的需求"></a>新的需求</h3><p>糖果公司在程序运行一段时间后，想要新增一个功能，有一个幸运玩家，就是售出糖果的时候，有10%的几率会掉出2课糖果，而不是一颗。</p><p>面对原有的程序，我们就必须要新增一个状态，称为“赢家”。还不太麻烦，不过在每个方法的条件判断里处理“赢家”状态；这可有的忙了。随着新的行为出现，这个程序越来越难以适用。</p><h3 id="新的设计"><a href="#新的设计" class="headerlink" title="新的设计"></a>新的设计</h3><p>我们的计划是：不要维护我们现有的代码，我们重写它以便于将状态对象封装在各自的类中，然后在动作发生时委托给当前状态。</p><ol><li>首先，我们定义一个State接口。在这个接口内，糖果机的每个动作都有一个对应的方法。</li><li>然后为机器中的每个状态实现状态类。这些类将负责对应的状态下进行机器的行为</li><li>最后，我们要摆脱旧的条件代码，取而代之的方式是，将动作委托到状态类。</li></ol><h3 id="定义状态模式"><a href="#定义状态模式" class="headerlink" title="定义状态模式"></a>定义状态模式</h3><p><strong>状态模式</strong>：允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它的类。</p><h3 id="实现状态类"><a href="#实现状态类" class="headerlink" title="实现状态类"></a>实现状态类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 状态接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-06 22:00:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 投币</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertQuarter</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退币方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">ejectQuarter</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转动曲柄方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">turnCrank</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发放糖果方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dispense</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 未投币状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-06 22:01:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NoQuarterState</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> GumballMachine gumballMachine;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NoQuarterState</span><span class="params">(GumballMachine gumballMachine)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gumballMachine = gumballMachine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertQuarter</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;You inserted a quarter.&quot;</span>);</span><br><span class="line">        gumballMachine.setState(gumballMachine.getHasQuarterState());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ejectQuarter</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;You haven&#x27;t inserted a quarter.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnCrank</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;You turned, but there&#x27;s no quarter.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispense</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;You need to pay first.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 已投币状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-06 22:09:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HasQuarterState</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> GumballMachine gumballMachine;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>(System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HasQuarterState</span><span class="params">(GumballMachine gumballMachine)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gumballMachine = gumballMachine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertQuarter</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;You can&#x27;t insert another quarter.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ejectQuarter</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Quarter returned.&quot;</span>);</span><br><span class="line">        gumballMachine.setState(gumballMachine.getNoQuarterState());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnCrank</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;You turned...&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">winner</span> <span class="operator">=</span> random.nextInt(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span> (winner == <span class="number">0</span> &amp;&amp; gumballMachine.getCount() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            gumballMachine.setState(gumballMachine.getWinnerState());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            gumballMachine.setState(gumballMachine.getSoldState());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispense</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;No gumball dispensed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 售罄状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-06 22:08:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldOutState</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> GumballMachine gumballMachine;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SoldOutState</span><span class="params">(GumballMachine gumballMachine)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gumballMachine = gumballMachine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertQuarter</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;You can&#x27;t insert a quarter, the machine is sold out.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ejectQuarter</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;You can&#x27;t eject, you haven&#x27;t inserted a quarter yet.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnCrank</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;You turned, but there are no gumballs.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispense</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;No gumball dispensed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 售出状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-06 22:09:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldState</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> GumballMachine gumballMachine;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SoldState</span><span class="params">(GumballMachine gumballMachine)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gumballMachine = gumballMachine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertQuarter</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Please wait, we&#x27;re already giving you a gumball.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ejectQuarter</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sorry, you already turned the crank.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnCrank</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Turning twice doesn&#x27;t get you another gumball.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispense</span><span class="params">()</span> &#123;</span><br><span class="line">        gumballMachine.releaseBall();</span><br><span class="line">        <span class="keyword">if</span> (gumballMachine.getCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            gumballMachine.setState(gumballMachine.getNoQuarterState());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Oops, out of gumballs!&quot;</span>);</span><br><span class="line">            gumballMachine.setState(gumballMachine.getSoldOutState());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 幸运玩家状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-06 22:20:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WinnerState</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> GumballMachine gumballMachine;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WinnerState</span><span class="params">(GumballMachine gumballMachine)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gumballMachine = gumballMachine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertQuarter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 省略...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ejectQuarter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 省略...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnCrank</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 省略...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispense</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;YOU&#x27;RE A WINNER! You get two gumballs for you quarter.&quot;</span>);</span><br><span class="line">        gumballMachine.releaseBall();</span><br><span class="line">        <span class="keyword">if</span> (gumballMachine.getCount() == <span class="number">0</span>) &#123;</span><br><span class="line">             gumballMachine.setState(gumballMachine.getSoldOutState());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            gumballMachine.releaseBall();</span><br><span class="line">            <span class="keyword">if</span> (gumballMachine.getCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                gumballMachine.setState(gumballMachine.getNoQuarterState());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Oops, out of gumballs！&quot;</span>);</span><br><span class="line">                gumballMachine.setState(gumballMachine.getSoldOutState());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="改造糖果机"><a href="#改造糖果机" class="headerlink" title="改造糖果机"></a>改造糖果机</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 糖果机</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-09-06 21:18:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GumballMachine</span> &#123;</span><br><span class="line">    <span class="comment">// 售罄</span></span><br><span class="line">    <span class="keyword">private</span> State soldOutState;</span><br><span class="line">    <span class="comment">// 没有投币</span></span><br><span class="line">    <span class="keyword">private</span> State noQuarterState;</span><br><span class="line">    <span class="comment">// 已投币</span></span><br><span class="line">    <span class="keyword">private</span> State hasQuarterState;</span><br><span class="line">    <span class="comment">// 售出</span></span><br><span class="line">    <span class="keyword">private</span> State soldState;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 赢家</span></span><br><span class="line">    <span class="keyword">private</span> State winnerState;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前状态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">State</span> <span class="variable">state</span> <span class="operator">=</span> soldOutState;</span><br><span class="line">    <span class="comment">// 糖果数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GumballMachine</span><span class="params">(<span class="type">int</span> count)</span> &#123;</span><br><span class="line">        soldOutState = <span class="keyword">new</span> <span class="title class_">SoldOutState</span>(<span class="built_in">this</span>);</span><br><span class="line">        noQuarterState = <span class="keyword">new</span> <span class="title class_">NoQuarterState</span>(<span class="built_in">this</span>);</span><br><span class="line">        hasQuarterState = <span class="keyword">new</span> <span class="title class_">HasQuarterState</span>(<span class="built_in">this</span>);</span><br><span class="line">        soldState = <span class="keyword">new</span> <span class="title class_">SoldState</span>(<span class="built_in">this</span>);</span><br><span class="line">        winnerState = <span class="keyword">new</span> <span class="title class_">WinnerState</span>(<span class="built_in">this</span>);</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            state = noQuarterState;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 投币方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertQuarter</span><span class="params">()</span> &#123;</span><br><span class="line">        state.insertQuarter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退币方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ejectQuarter</span><span class="params">()</span> &#123;</span><br><span class="line">        state.ejectQuarter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转动曲柄方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnCrank</span><span class="params">()</span> &#123;</span><br><span class="line">        state.turnCrank();</span><br><span class="line">        state.dispense();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发放糖果方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispense</span><span class="params">()</span> &#123;</span><br><span class="line">        state.dispense();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">releaseBall</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A gumball comes rolling out the slot.&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (count != <span class="number">0</span>) &#123;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(State state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> State <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> State <span class="title function_">getSoldOutState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> soldOutState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> State <span class="title function_">getNoQuarterState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> noQuarterState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> State <span class="title function_">getHasQuarterState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hasQuarterState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> State <span class="title function_">getSoldState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> soldState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> State <span class="title function_">getWinnerState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> winnerState;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="展示新程序"><a href="#展示新程序" class="headerlink" title="展示新程序"></a>展示新程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GumballMachineTestDrive</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GumballMachine</span> <span class="variable">gumballMachine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GumballMachine</span>(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 打印机器状态</span></span><br><span class="line">        System.out.println(gumballMachine);</span><br><span class="line"></span><br><span class="line">        gumballMachine.insertQuarter();</span><br><span class="line">        gumballMachine.turnCrank();</span><br><span class="line"><span class="comment">// 打印机器状态</span></span><br><span class="line">        System.out.println(gumballMachine);</span><br><span class="line"></span><br><span class="line">        gumballMachine.insertQuarter();</span><br><span class="line">        gumballMachine.turnCrank();</span><br><span class="line"><span class="comment">// 打印机器状态</span></span><br><span class="line">        System.out.println(gumballMachine);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>状态模式允许一个对象基于内部状态而拥有不同的行为</li><li>和程序状态机不同，状态模式用类代表状态</li><li>Context会将行为委托给当前状态对象</li><li>通过将每个状态封装进一个类，我们把以后需要做的任何改变局部化了</li><li>状态模式和策略模式有不同的类图，但是它们的意图不同</li><li>策略模式通常会用行为或算法来配置Context类</li><li>状态模式允许Context随着状态的改变而改变行为</li><li>状态模式可以由State类或Context类控制</li><li>使用状态模式通常会导致设计中的类数目大量增加</li><li>状态类可以被多个Context实例共享</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/9cb4fe19-db49-4c0a-8751-e26c0367d212&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://chivalry727.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="状态模式" scheme="https://chivalry727.github.io/tags/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="State Design Pattern" scheme="https://chivalry727.github.io/tags/State-Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之迭代器模式</title>
    <link href="https://chivalry727.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chivalry727.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-08-30T06:17:57.000Z</published>
    <updated>2025-02-26T12:08:01.052Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/user-attachments/assets/3eb66a89-c105-4574-8670-e499b5a2fe2b"></p><span id="more"></span><h2 id="设计模式之迭代器模式"><a href="#设计模式之迭代器模式" class="headerlink" title="设计模式之迭代器模式"></a>设计模式之迭代器模式</h2><h3 id="管理良好的集合"><a href="#管理良好的集合" class="headerlink" title="管理良好的集合"></a>管理良好的集合</h3><p>有许多种方法可以把对象堆起来成为一个集合。你可以把它们放进数组、堆栈、列表或者是散列表中。接下来我们会学习如何让客户遍历你的对象而又无法窥视你存储对象的方式；也将学习如何创建一些对象超集合，能够一口气就跳过某些让人望而生畏的数据结构。</p><h3 id="餐厅和煎饼屋合并了"><a href="#餐厅和煎饼屋合并了" class="headerlink" title="餐厅和煎饼屋合并了"></a>餐厅和煎饼屋合并了</h3><p>现在我们可以去同一地方就可以享用煎饼早餐，和午餐了。但是，好像有一点儿麻烦。。。因为煎饼屋使用的<code>ArrayList</code>，而餐厅使用的是数组，它们都不想改变实现，毕竟有太多的代码依赖于它们了。</p><h3 id="查看菜单项"><a href="#查看菜单项" class="headerlink" title="查看菜单项"></a>查看菜单项</h3><p>让我们检查每份菜单上的项目和实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 菜单项</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-30 21:13:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MenuItem</span> &#123;</span><br><span class="line">    <span class="comment">// 菜名</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="comment">// 描述</span></span><br><span class="line">    String description;</span><br><span class="line">    <span class="comment">// 是否素食</span></span><br><span class="line">    <span class="type">boolean</span> vegetarian;</span><br><span class="line">    <span class="comment">// 价格</span></span><br><span class="line">    <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MenuItem</span><span class="params">(String name, String description, <span class="type">boolean</span> vegetarian, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">        <span class="built_in">this</span>.vegetarian = vegetarian;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 省略 get/set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="煎饼屋菜单实现"><a href="#煎饼屋菜单实现" class="headerlink" title="煎饼屋菜单实现"></a>煎饼屋菜单实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 煎饼屋的菜单</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-30 21:15:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PancakeHouseMenu</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里使用ArrayList 实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;MenuItem&gt; menuItems;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PancakeHouseMenu</span><span class="params">()</span> &#123;</span><br><span class="line">        menuItems = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        addItem(<span class="string">&quot;煎饼早餐&quot;</span>, <span class="string">&quot;炒鸡蛋煎饼，加面包&quot;</span>, <span class="literal">true</span>, <span class="number">2.99</span>);</span><br><span class="line">        addItem(<span class="string">&quot;常规煎饼早餐&quot;</span>, <span class="string">&quot;煎饼配煎蛋，香肠&quot;</span>, <span class="literal">false</span>, <span class="number">2.99</span>);</span><br><span class="line">        addItem(<span class="string">&quot;蓝莓煎饼&quot;</span>, <span class="string">&quot;用新鲜蓝莓制成的煎饼&quot;</span>, <span class="literal">true</span>, <span class="number">3.49</span>);</span><br><span class="line">        addItem(<span class="string">&quot;华夫饼&quot;</span>, <span class="string">&quot;华夫饼，您可以选择蓝莓或草莓&quot;</span>, <span class="literal">true</span>, <span class="number">3.59</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增菜单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> description</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> vegetarian</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> price</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addItem</span><span class="params">(String name, String description, <span class="type">boolean</span> vegetarian, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="type">MenuItem</span> <span class="variable">menuItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(name, description, vegetarian, price);</span><br><span class="line">        menuItems.add(menuItem);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回菜单列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;MenuItem&gt; <span class="title function_">getMenuItems</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> menuItems;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="餐厅菜单实现"><a href="#餐厅菜单实现" class="headerlink" title="餐厅菜单实现"></a>餐厅菜单实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 晚餐菜单</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-30 21:26:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DinerMenu</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_ITEMS</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">numberOfItems</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MenuItem[] menuItems;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DinerMenu</span><span class="params">()</span> &#123;</span><br><span class="line">        menuItems = <span class="keyword">new</span> <span class="title class_">MenuItem</span>[MAX_ITEMS];</span><br><span class="line"></span><br><span class="line">        addItem(<span class="string">&quot;Vegetarian BLT&quot;</span>, <span class="string">&quot;全麦培根莴苣和番茄&quot;</span>, <span class="literal">true</span>, <span class="number">2.99</span>);</span><br><span class="line">        addItem(<span class="string">&quot;BLT&quot;</span>, <span class="string">&quot;培根配生菜和番茄全麦&quot;</span>, <span class="literal">false</span>, <span class="number">2.99</span>);</span><br><span class="line">        addItem(<span class="string">&quot;当天的汤&quot;</span>, <span class="string">&quot;当天的汤，配以土豆沙拉&quot;</span>, <span class="literal">false</span>, <span class="number">3.29</span>);</span><br><span class="line">        addItem(<span class="string">&quot;热狗&quot;</span>, <span class="string">&quot;热狗, 配酸菜，调味，洋葱，加奶酪&quot;</span>, <span class="literal">false</span>, <span class="number">3.99</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增菜单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> description</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> vegetarian</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> price</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addItem</span><span class="params">(String name, String description, <span class="type">boolean</span> vegetarian, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="type">MenuItem</span> <span class="variable">menuItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(name, description, vegetarian, price);</span><br><span class="line">        <span class="keyword">if</span> (numberOfItems &gt;= MAX_ITEMS) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Sorry, menu is full! Can&#x27;t add item to menu&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            menuItems[numberOfItems] = menuItem;</span><br><span class="line">            numberOfItems++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回菜单列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> MenuItem[] getMenuItems() &#123;</span><br><span class="line">        <span class="keyword">return</span> menuItems;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务员打印菜单"><a href="#服务员打印菜单" class="headerlink" title="服务员打印菜单"></a>服务员打印菜单</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Waitress</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PancakeHouseMenu pancakeHouseMenu;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DinerMenu dinerMenu;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Waitress</span><span class="params">(PancakeHouseMenu pancakeHouseMenu, DinerMenu dinerMenu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pancakeHouseMenu = pancakeHouseMenu;</span><br><span class="line">        <span class="built_in">this</span>.dinerMenu = dinerMenu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印合并后的餐厅菜单项</span></span><br><span class="line">    <span class="comment">// 我们总是要处理两个菜单，并且用两个循环遍历这些项。如果还有第三家餐厅以不同的实现，我们就需要有三个循环。。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printMenu</span><span class="params">()</span> &#123;</span><br><span class="line">        ArrayList&lt;MenuItem&gt; pancakeHouseMenuMenuItems = pancakeHouseMenu.getMenuItems();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; pancakeHouseMenuMenuItems.size(); i++) &#123;</span><br><span class="line">            <span class="type">MenuItem</span> <span class="variable">menuItem</span> <span class="operator">=</span> pancakeHouseMenuMenuItems.get(i);</span><br><span class="line">            System.out.print(menuItem.getName() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            System.out.println(menuItem.getPrice() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            System.out.println(menuItem.getDescription());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        MenuItem[] dinerMenuMenuItems = dinerMenu.getMenuItems();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dinerMenuMenuItems.length; i++) &#123;</span><br><span class="line">            <span class="type">MenuItem</span> <span class="variable">menuItem</span> <span class="operator">=</span> dinerMenuMenuItems[i];</span><br><span class="line">            System.out.print(menuItem.getName() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            System.out.println(menuItem.getPrice() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            System.out.println(menuItem.getDescription());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可以封装遍历吗？"><a href="#可以封装遍历吗？" class="headerlink" title="可以封装遍历吗？"></a>可以封装遍历吗？</h3><p>我们可以封装变化的部分。很明显，在这里发生变化的是：由不同的集合类型所造成的遍历。</p><h3 id="在餐厅加入一个迭代器"><a href="#在餐厅加入一个迭代器" class="headerlink" title="在餐厅加入一个迭代器"></a>在餐厅加入一个迭代器</h3><p>想要在餐厅中加入一个迭代器，我们需要先定义迭代器接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 迭代器接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-30 21:45:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Iterator</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span>;</span><br><span class="line">    Object <span class="title function_">next</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现具体的迭代器，为餐厅菜单服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DinerMenuIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MenuItem[] items;</span><br><span class="line">    <span class="comment">// 记录当前数组遍历的位置</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DinerMenuIterator</span><span class="params">(MenuItem[] items)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.items = items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (position &gt;= items.length || items[position] == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MenuItem</span> <span class="variable">item</span> <span class="operator">=</span> items[position];</span><br><span class="line">        position++;</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PancakeHouseIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;MenuItem&gt; menuItems;</span><br><span class="line">    <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PancakeHouseIterator</span><span class="params">(ArrayList&lt;MenuItem&gt; menuItems)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.menuItems = menuItems;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (position &gt;= menuItems.size() || menuItems.get(position) == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MenuItem</span> <span class="variable">menuItem</span> <span class="operator">=</span> menuItems.get(position);</span><br><span class="line">        position++;</span><br><span class="line">        <span class="keyword">return</span> menuItem;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用迭代器改写餐厅菜单"><a href="#用迭代器改写餐厅菜单" class="headerlink" title="用迭代器改写餐厅菜单"></a>用迭代器改写餐厅菜单</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 晚餐菜单</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-30 21:26:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DinerMenu</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_ITEMS</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">numberOfItems</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MenuItem[] menuItems;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 省略其他方法...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回菜单列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> MenuItem[] getMenuItems() &#123;</span><br><span class="line">        <span class="keyword">return</span> menuItems;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回一个迭代器的实现</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Iterator <span class="title function_">createIterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DinerMenuIterator</span>(getMenuItems());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PancakeHouseMenu</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里使用ArrayList 实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;MenuItem&gt; menuItems;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略其他方法...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回菜单列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;MenuItem&gt; <span class="title function_">getMenuItems</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> menuItems;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Iterator <span class="title function_">createIterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PancakeHouseIterator</span>(getMenuItems());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修正服务员打印菜单"><a href="#修正服务员打印菜单" class="headerlink" title="修正服务员打印菜单"></a>修正服务员打印菜单</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Waitress</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PancakeHouseMenu pancakeHouseMenu;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DinerMenu dinerMenu;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Waitress</span><span class="params">(PancakeHouseMenu pancakeHouseMenu, DinerMenu dinerMenu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pancakeHouseMenu = pancakeHouseMenu;</span><br><span class="line">        <span class="built_in">this</span>.dinerMenu = dinerMenu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printMenu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> pancakeHouseMenu.createIterator();</span><br><span class="line">        printMenu(iterator);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">dinerMenuIterator</span> <span class="operator">=</span> dinerMenu.createIterator();</span><br><span class="line">        printMenu(dinerMenuIterator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printMenu</span><span class="params">(Iterator iterator)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">MenuItem</span> <span class="variable">menuItem</span> <span class="operator">=</span> (MenuItem) iterator.next();</span><br><span class="line">            System.out.print(menuItem.getName() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            System.out.println(menuItem.getPrice() + <span class="string">&quot; --&quot;</span>);</span><br><span class="line">            System.out.println(menuItem.getDescription());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试我们的代码"><a href="#测试我们的代码" class="headerlink" title="测试我们的代码"></a>测试我们的代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MenuTestDrive</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">PancakeHouseMenu</span> <span class="variable">pancakeHouseMenu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PancakeHouseMenu</span>();</span><br><span class="line">        <span class="type">DinerMenu</span> <span class="variable">dinerMenu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DinerMenu</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Waitress</span> <span class="variable">waitress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Waitress</span>(pancakeHouseMenu, dinerMenu);</span><br><span class="line">        waitress.printMenu();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用Java的Iterator接口改良菜单"><a href="#使用Java的Iterator接口改良菜单" class="headerlink" title="使用Java的Iterator接口改良菜单"></a>使用Java的Iterator接口改良菜单</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Menu</span> &#123;</span><br><span class="line">    <span class="comment">// 简单接口，让客户能够取得一个菜单项迭代器</span></span><br><span class="line">    Iterator <span class="title function_">createIterator</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 煎饼屋的菜单</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-30 21:15:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PancakeHouseMenu</span> <span class="keyword">implements</span> <span class="title class_">Menu</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里使用ArrayList 实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;MenuItem&gt; menuItems;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略其他方法...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator <span class="title function_">createIterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> menuItems.iterator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DinerMenuIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MenuItem[] items;</span><br><span class="line">    <span class="comment">// 记录当前数组遍历的位置</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DinerMenuIterator</span><span class="params">(MenuItem[] items)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.items = items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (position &gt;= items.length || items[position] == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MenuItem</span> <span class="variable">item</span> <span class="operator">=</span> items[position];</span><br><span class="line">        position++;</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (position &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;You can&#x27;t remove an item until you&#x27;ve done at least one next()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (items[position - <span class="number">1</span>] != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> position - <span class="number">1</span>; i &lt; (items.length - <span class="number">1</span>); i++) &#123;</span><br><span class="line">                items[i] = items[i + <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            items[items.length - <span class="number">1</span>] = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改造我们的服务员类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Waitress</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Menu pancakeHouseMenu;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Menu dinerMenu;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Waitress</span><span class="params">(Menu pancakeHouseMenu, Menu dinerMenu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pancakeHouseMenu = pancakeHouseMenu;</span><br><span class="line">        <span class="built_in">this</span>.dinerMenu = dinerMenu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printMenu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> pancakeHouseMenu.createIterator();</span><br><span class="line">        printMenu(iterator);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">dinerMenuIterator</span> <span class="operator">=</span> dinerMenu.createIterator();</span><br><span class="line">        printMenu(dinerMenuIterator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printMenu</span><span class="params">(Iterator iterator)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">MenuItem</span> <span class="variable">menuItem</span> <span class="operator">=</span> (MenuItem) iterator.next();</span><br><span class="line">            System.out.print(menuItem.getName() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            System.out.println(menuItem.getPrice() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            System.out.println(menuItem.getDescription());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="改良的好处"><a href="#改良的好处" class="headerlink" title="改良的好处"></a>改良的好处</h3><p>煎饼屋菜单和餐厅菜单的类，都实现了Menu接口，服务员类可以利用接口（而不是具体类）引用每一个菜单对象。这样，通过“针对接口编程，而不是针对实现编程”，这样就可以减少服务员类与具体类之间的依赖。</p><h3 id="定义迭代器模式"><a href="#定义迭代器模式" class="headerlink" title="定义迭代器模式"></a>定义迭代器模式</h3><p><strong>迭代器模式</strong>提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>迭代器允许访问聚合的元素，而不需要暴露它的内部结构</li><li>迭代器将遍历聚合的工作封装进一个对象中</li><li>当使用迭代器的时候，我们依赖聚合提供遍历</li><li>迭代器提供了一个通用的接口，让我们遍历聚合项，当我们编码使用聚合的项时，就可以使用多态机制</li><li>我们应该努力让一个类只分配一个责任</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/3eb66a89-c105-4574-8670-e499b5a2fe2b&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://chivalry727.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="迭代器模式" scheme="https://chivalry727.github.io/tags/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Iterator Design Pattern" scheme="https://chivalry727.github.io/tags/Iterator-Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>面试总结（某地产）</title>
    <link href="https://chivalry727.github.io/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93%EF%BC%88%E6%9F%90%E5%9C%B0%E4%BA%A7%EF%BC%89/"/>
    <id>https://chivalry727.github.io/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93%EF%BC%88%E6%9F%90%E5%9C%B0%E4%BA%A7%EF%BC%89/</id>
    <published>2020-08-26T07:45:27.000Z</published>
    <updated>2025-02-27T11:13:21.685Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/user-attachments/assets/901d8359-470a-466c-9f9a-ab717480529d"></p><span id="more"></span><h2 id="面试总结（某地产）"><a href="#面试总结（某地产）" class="headerlink" title="面试总结（某地产）"></a>面试总结（某地产）</h2><h3 id="gRPC-如何做负载的"><a href="#gRPC-如何做负载的" class="headerlink" title="gRPC 如何做负载的"></a>gRPC 如何做负载的</h3><p>gRPC负载均衡，官方只提供了<code>pick_first</code>和<code>round_robin</code>两种负载均衡策略</p><h3 id="gRPC-限流怎么做的"><a href="#gRPC-限流怎么做的" class="headerlink" title="gRPC 限流怎么做的"></a>gRPC 限流怎么做的</h3><p>可以通过信号量来做限流</p><h3 id="Dubbo-的整体架构设计有哪些分层"><a href="#Dubbo-的整体架构设计有哪些分层" class="headerlink" title="Dubbo 的整体架构设计有哪些分层?"></a>Dubbo 的整体架构设计有哪些分层?</h3><ul><li><strong>接口服务层( Service)</strong>:该层与业务逻辑相关，根据 provider 和 consumer 的业务设 计对应的接口和实现</li><li><strong>配置层( Config)</strong>:对外配置接口，以 ServiceConfig 和 ReferenceConfig 为中心 <strong>服务代理层( Proxy)</strong>:服务接口透明代理，生成服务的客户端 Stub 和 服务端的 Skeleton， 以 ServiceProxy 为中心， 扩展接口为 ProxyFactory</li><li><strong>服务注册层( Registry)</strong> : 封装服务地址的注册和发现， 以服务 URL 为中心， 扩展 接口为 RegistryFactory、Registry、RegistryService</li><li><strong>路由层( Cluster)</strong>: 封装多个提供者的路由和负载均衡， 并桥接注册中心， 以 Invoker 为中心， 扩展接口为 Cluster、Directory、Router 和 LoadBlancce</li><li><strong>监控层( Monitor)</strong>:RPC 调用次数和调用时间监控， 以 Statistics 为中心， 扩 展接口为 MonitorFactory、Monitor 和 MonitorService</li><li><strong>远程调用层(Protocal)</strong>:封装 RPC 调用，以 Invocation 和 Result 为中心， 扩展接口为 Protocal、Invoker 和 Exporter</li><li><strong>信息交换层( Exchange</strong>): 封装请求响应模式， 同步转异步。以 Request 和 Response 为中心， 扩展接口为 Exchanger、ExchangeChannel、ExchangeClient 和 ExchangeServer</li><li><strong>网络传输层( Transport)</strong>:抽象 mina 和 netty 为统一接口，以 Message 为中心， 扩展接口为 Channel、Transporter、Client、Server 和 Codec</li><li><strong>数据序列化层( Serialize)</strong>: 可复用的一些工具， 扩展接口为 Serialization、 ObjectInput、ObjectOutput 和 ThreadPool</li></ul><h3 id="Dubbo-如何做负载的"><a href="#Dubbo-如何做负载的" class="headerlink" title="Dubbo 如何做负载的"></a>Dubbo 如何做负载的</h3><p>dubbo的负载均衡全部由AbstractLoadBalance的子类来实现，Dubbo默认采用的是随机负载策略</p><h3 id="Dubbo的负载均衡策略"><a href="#Dubbo的负载均衡策略" class="headerlink" title="Dubbo的负载均衡策略"></a>Dubbo的负载均衡策略</h3><p>dubbo 总共有四种负载均衡策略</p><ul><li>RandomLoadBalance 随机：默认情况下，dubbo 是 random load balance 随机调用实现负载均衡，可以对 provider 不同实例设置不同的权重，会按照权重来负载均衡，权重越大分配流量越高，一般就用这个默认的就可以了。</li><li>RoundRobinLoadBalance 轮询：这个的话默认就是均匀地将流量打到各个机器上去，但是如果各个机器的性能不一样，容易导致性能差的机器负载过高。所以此时需要调整权重，让性能差的机器承载权重小一些，流量少一些。</li><li>LeastActiveLoadBalance 最少活跃调用数：这个就是自动感知一下，如果某个机器性能越差，那么接收的请求越少，越不活跃，此时就会给不活跃的性能差的机器更少的请求。</li><li>ConsistentHashLoadBalance 一致性 Hash：一致性 Hash 算法，相同参数的请求一定分发到一个 provider 上去，provider 挂掉的时候，会基于虚拟节点均匀分配剩余的流量，抖动不会太大。如果你需要的不是随机负载均衡，是要一类请求都到一个节点，那就走这个一致性 Hash 策略。</li></ul><h3 id="Dubbo-的容错策略"><a href="#Dubbo-的容错策略" class="headerlink" title="Dubbo 的容错策略"></a>Dubbo 的容错策略</h3><p>dubbo 集群的六种容错策略：</p><ol><li>failover cluster 模式：失败自动切换，自动重试其他机器，默认就是这个，常见于读操作。（失败重试其它机器）</li><li>failfast cluster模式：一次调用失败就立即失败，常见于写操作。（调用失败就立即失败）</li><li>failsafe cluster 模式：出现异常时忽略掉，常用于不重要的接口调用，比如记录日志。</li><li>failback cluster 模式：失败了后台自动记录请求，然后定时重发，比较适合于写消息队列这种。</li><li>forking cluster 模式：并行调用多个 provider，只要一个成功就立即返回。</li><li>broadcacst cluster：逐个调用所有的 provider。</li></ol><h3 id="Spring-循环依赖怎么解决的，为什么使用三级缓存？"><a href="#Spring-循环依赖怎么解决的，为什么使用三级缓存？" class="headerlink" title="Spring 循环依赖怎么解决的，为什么使用三级缓存？"></a>Spring 循环依赖怎么解决的，为什么使用三级缓存？</h3><p>Spring无法解决构造器注入的循环依赖，可以解决setter注入的循环依赖并且只能解决单例bean的循环依赖</p><ol><li>先从一级缓存singletonObjects中去获取。（如果获取到就直接return）</li><li>如果获取不到或者对象正在创建中（isSingletonCurrentlyInCreation()），那就再从二级缓存earlySingletonObjects中获取。（如果获取到就直接return）</li><li>如果还是获取不到，且允许singletonFactories（allowEarlyReference=true）通过getObject()获取。就从三级缓存singletonFactory.getObject()获取。（如果获取到了就从singletonFactories中移除，并且放进earlySingletonObjects。其实也就是从三级缓存移动（是剪切、不是复制哦~）到了二级缓存）</li></ol><h3 id="Spring-Bean-生命周期"><a href="#Spring-Bean-生命周期" class="headerlink" title="Spring Bean 生命周期"></a>Spring Bean 生命周期</h3><p><a href="https://chivalry727.github.io/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-2/#more">参考面试总结2</a>里的Spring Bean生命周期总结</p><h3 id="Spring-两种动态代理区别"><a href="#Spring-两种动态代理区别" class="headerlink" title="Spring 两种动态代理区别"></a>Spring 两种动态代理区别</h3><ul><li>Spring JDK原生动态代理是基于Java反射实现的，Java动态代理是基于接口的，如果对象没有实现接口，Spring就会使用CGLIB动态代理</li></ul><ul><li>CGLIB是一个基于ASM的字节码生成库，它允许我们在运行时对字节码进行修改和动态生成。CGLIB通过继承方式实现代理</li></ul><h3 id="Spring的BeanPostProcessor和BeanFactoryPostProcessor区别"><a href="#Spring的BeanPostProcessor和BeanFactoryPostProcessor区别" class="headerlink" title="Spring的BeanPostProcessor和BeanFactoryPostProcessor区别"></a>Spring的BeanPostProcessor和BeanFactoryPostProcessor区别</h3><p>BeanPostProcessor接口：后置bean处理器，允许自定义修改新的bean实例，应用程序上下文可以在其bean定义中自动检测BeanPostProcessor类型的bean，并将它们应用于随后创建的任何bean。（例如：配置文件中注册了一个自定义BeanPostProcessor类型的bean，一个User类型的bean，应用程序上下文会在创建User实例之后对User应用BeanPostProcessor）。</p><p>BeanFactoryPostProcessor接口：后置工厂处理器，允许自定义修改应用程序上下文的bean定义，调整bean属性值。应用程序上下文可以在其bean定义中自动检测BeanFactoryPostProcessor，并在创建任何非BeanFactoryPostProcessor类型bean之前应用它们（例如：配置文件中注册了一个自定义BeanFactoryPostProcessor类型的bean，一个User类型的bean，应用程序上下文会在创建User实例之前对User应用BeanFactoryPostProcessor）</p><h3 id="Spring-AOP-和-AspectJ-AOP-区别"><a href="#Spring-AOP-和-AspectJ-AOP-区别" class="headerlink" title="Spring AOP 和 AspectJ AOP 区别"></a>Spring AOP 和 AspectJ AOP 区别</h3><h4 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h4><ol><li>Spring是基于动态代理来实现的AOP，默认如果使用接口，就用JDK提供的动态代理实现；如果是方法则使用CGLIB实现</li><li>Spring AOP需要依赖IoC容器来管理，并且只能作用于Spring容器，使用纯Java代码实现</li><li>在性能上，由于Spring AOP是基于动态代理来实现的，在容器启动时需要生成代理实例，在方法调用上也会增加栈的深度，使得Spring AOP的性能不如AspectJ</li></ol><h4 id="AspectJ"><a href="#AspectJ" class="headerlink" title="AspectJ"></a>AspectJ</h4><ul><li>AspectJ来自于Eclipse基金会</li><li>AspectJ属于静态织入，通过修改代码来实现，有如下几个织入的时机：<ol><li>编译期织入（Compile-time weaving）：如类A使用AspectJ添加一个属性，类B引用了它，这个时候就需要编译期的时候进行织入，否则没法编译类B</li><li>编译后织入（Post-compile weaving）：也就是生成了<code>.class</code>文件或已经打成了jar包，这种情况我们需要增强处理的话，就要用到编译后织入</li><li>类加载后织入（Load-time weaving）：指的是在加载类的时候进行织入，要实现这个时期的织入，有几种常见的方法：<ol><li>自定义类加载器来干这个，这个应该是最容易想到的办法，在被织入类加载到JVM前去对它进行加载，这样就可以在加载到时候定义行为来</li><li>在JVM启动的时候指定AspectJ提供的agent:<code>-javaagent:xxx/xxx/aspectjweaver.jar</code></li></ol></li></ol></li><li>AspectJ可以做Spring AOP干不了的事情，它是AOP编程的完全解决方案，Spring AOP则致力于解决企业级开发中最普遍的AOP（方法织入）。而不是成为像AspectJ一样的AOP方案</li><li>因为AspectJ在实际运行之前就完成了织入，所以说它生成的类是没有额外运行时开销的</li></ul><h3 id="HashMap-如何解决hash碰撞，以及何时扩容的"><a href="#HashMap-如何解决hash碰撞，以及何时扩容的" class="headerlink" title="HashMap 如何解决hash碰撞，以及何时扩容的"></a>HashMap 如何解决hash碰撞，以及何时扩容的</h3><p><strong>Hash冲突</strong>：由于用于计算的数据是无限的<code>H(key),key属于(-∞,+∞)</code>,而映射到区间是有限的，所以肯定会存在两个key:key1,key2，H(key1)=H(key2)，这就是hash冲突。一般的解决Hash冲突方法有:开放定址法、再哈希法、链地址法（拉链法）、建立公共溢出区。</p><p><strong>开放地址法</strong>：也称为<code>再散列法</code>，基本思想就是，如果<code>p=H(key)</code>出现冲突时，则以<code>p</code>为基础，再次hash，<code>p1=H(p)</code>,如果p1再次出现冲突，则以p1为基础，以此类推，直到找到一个不冲突的哈希地址<code>pi</code>。 因此开放定址法所需要的hash表的长度要大于等于所需要存放的元素，而且因为存在再次hash，所以<code>只能在删除的节点上做标记，而不能真正删除节点。</code></p><p>缺点：容易产生堆积问题;不适合大规模的数据存储;插入时会发生多次冲突的情况;删除时要考虑与要删除元素互相冲突的另一个元素，比较复杂。</p><p><strong>再哈希法（双重散列，多重散列）</strong>：提供多个不同的hash函数，当<code>R1=H1(key1)</code>发生冲突时，再计算<code>R2=H2(key1)</code>，直到没有冲突为止。 这样做虽然不易产生堆集，但增加了计算的时间。</p><p><strong>链地址法（拉链法）</strong>：将哈希值相同的元素构成一个同义词的单链表,并将单链表的头指针存放在哈希表的第i个单元中，查找、插入和删除主要在同义词链表中进行。链表法适用于经常进行插入和删除的情况。HashMap采用的就是链地址法来解决hash冲突。(链表长度大于等于8时转为红黑树)</p><p><strong>建立公共溢出区</strong>：将哈希表分为公共表和溢出表，当溢出发生时，将所有溢出数据统一放到溢出区。</p><p><strong>何时扩容</strong>：HashMap的容量是有限的。当经过多次元素插入的时候，使得HashMap达到一定的饱和度，Key映射位置的几率不断变大。这个时候，HashMap就需要扩容了，也就是Resize。<strong>当 HashMap.size &gt;= Capacity*LoadFactor 时，HashMap可能会进行Resize。</strong></p><p>Hashmap的扩容需要满足两个条件：<strong>当前数据存储的数量（即size()）大小必须大于等于阈值；当前加入的数据是否发生了hash冲突。</strong></p><h3 id="ArrayList与LinkedList区别"><a href="#ArrayList与LinkedList区别" class="headerlink" title="ArrayList与LinkedList区别"></a>ArrayList与LinkedList区别</h3><ul><li>ArrayList基于数组实现的列表</li></ul><ul><li>LinkeddList基于链表实现的列表</li></ul><h3 id="LinkedHashMap如何实现有序的"><a href="#LinkedHashMap如何实现有序的" class="headerlink" title="LinkedHashMap如何实现有序的"></a>LinkedHashMap如何实现有序的</h3><p>LinkedHashMap是继承于HashMap，是基于HashMap和双向链表来实现的。</p><p>HashMap是无序的；LinkedHashMap有序的，可分为插入顺序和访问顺序两种。如果是访问顺序，那put和get操作已存在的Entry时，都会把Entry移动到双向链表的表尾(其实是先删除再插入)。</p><p>LinkedHashMap存取数据，还是跟HashMap一样使用的Entry[]的方式，双向链表只是为了保证顺序。</p><h3 id="Queue的阻塞队列用过哪几种"><a href="#Queue的阻塞队列用过哪几种" class="headerlink" title="Queue的阻塞队列用过哪几种"></a>Queue的阻塞队列用过哪几种</h3><p>Java提供了7个阻塞队列：</p><ul><li>ArrayBlockingQueue：一个由数组结构组成的有界阻塞队列<ul><li>ArrayBlockingQueue按照先进先出（FIFO）的原则对元素进行排序</li><li>默认情况下不保证线程公平的访问队列，所谓公平访问队列是指阻塞的线程，可以按照先后顺序访问队列</li><li>非公平性是对先等待的线程是非公平的，当队列可用时，阻塞的线程都可以争夺访问队列的资格</li><li>为了保证公平性，通常会降低吞吐量</li></ul></li><li>LinkedBlockingQueue：一个由链表结构组成的有界阻塞队列<ul><li>LinkedBlockingQueue队列默认和最大长度为Integer.MAX_VALUE</li><li>此队列也是按照先入先出（FIFO）的原则对元素进行排序</li></ul></li><li>PriorityBlockingQueue：一个支持优先级排序的无界阻塞队列<ul><li>默认情况下元素采取自然顺序升序排列</li><li>也可以自定义实现compareTo()方法来指定元素排序规则，或者初始化时，指定构造参数Comparator来对元素进行排序</li><li>需要注意的是不能保证同优先级元素的顺序</li></ul></li><li>DelayQueue：一个支持延时获取元素的无界阻塞队列<ul><li>DelayQueue队列使用PriorityQueue来实现</li><li>队列中的元素必须实现Delayed接口，在创建元素时可以指定多久才能从队列中获取当前元素</li><li>只有在延迟期满时才能从队列中提取元素</li></ul></li><li>SynchronousQueue：一个不存储元素的阻塞队列<ul><li>是一个不存储元素的阻塞队列</li><li>每个put操作必须等待一个take操作，否则不能继续添加元素</li><li>它支持公平访问队列，默认采用非公平性策略访问队列</li><li>该队列非常适合传递性场景</li></ul></li><li>LinkedTransferQueue：一个由链表结构组成的无界阻塞队列<ul><li>是一个由链表结构组成的无界阻塞TransferQueue队列</li><li>相比于其他阻塞队列，LinkedTransferQueue多个tryTransfer和transfer方法</li></ul></li><li>LinkedBlockingDeque：一个由链表结构组成的双向阻塞队列<ul><li>是一个由链表结构组成的双向阻塞队列</li><li>所谓双向队列指的是可以从队列的两端插入和移出元素</li><li>双向队列因为多了一个操作队列的入口、在多线程同时入队时，也就减少了一半的竞争</li><li>在初始化LinkedBlockingDeque时可以设置容量防止其过度膨胀</li><li>另外双向阻塞队列可以运用在“工作窃取”模式中</li></ul></li></ul><h3 id="AQS的实现原理"><a href="#AQS的实现原理" class="headerlink" title="AQS的实现原理"></a>AQS的实现原理</h3><h4 id="什么是AQS"><a href="#什么是AQS" class="headerlink" title="什么是AQS"></a>什么是AQS</h4><p>AQS全称为AbstractQueuedSynchronizer，它提供了一个FIFO队列，可以看成是一个用来实现同步锁以及其他涉及到同步功能的核心组件，常见的有：ReentrantLock、CountDownLatch、信号量等。AQS是一个抽象类，主要是通过继承的方式来使用，它本身没有实现任何的同步接口，仅仅是定义了同步状态的获取以及释放的方法来提供自定义的同步组件。</p><h4 id="AQS提供的功能"><a href="#AQS提供的功能" class="headerlink" title="AQS提供的功能"></a>AQS提供的功能</h4><p>从使用层面来说，AQS的功能分为两种：独占和共享</p><ul><li>独占锁：每次只能被一个线程持有锁，如：ReentrantLock</li><li>共享锁：允许多个线程同时获取锁，并发访问共享资源，如：ReentrantReadWriteLock</li></ul><h4 id="AQS的内部实现"><a href="#AQS的内部实现" class="headerlink" title="AQS的内部实现"></a>AQS的内部实现</h4><p>AQS的实现依赖内部的同步队列,也就是FIFO的双向队列，如果当前线程竞争锁失败，那么AQS会把当前线程以及等待状态信息构造成一个Node加入到同步队列中，同时再阻塞该线程。当获取锁的线程释放锁以后，会从队列中唤醒一个阻塞的节点(线程)。</p><p>AQS队列内部维护的是一个FIFO的双向链表，这种结构的特点是每个数据结构都有两个指针，分别指向直接的后继节点和直接前驱节点。所以双向链表可以从任意一个节点开始很方便的访问前驱和后继。每个Node其实是由线程封装，当线程争抢锁失败后会封装成Node加入到ASQ队列中去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="comment">/** 指示节点正在共享模式下等待的标记 */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">SHARED</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        <span class="comment">/** 指示节点正在以独占模式等待的标记 */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">EXCLUSIVE</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** waitStatus值，指示线程已取消 */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CANCELLED</span> <span class="operator">=</span>  <span class="number">1</span>;</span><br><span class="line">        <span class="comment">/** waitStatus值，指示后续线程需要释放 */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SIGNAL</span>    <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">/** waitStatus值，指示线程正在等待条件 */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CONDITION</span> <span class="operator">=</span> -<span class="number">2</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * waitStatus值，指示下一个acquireShared应该无条件传播</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PROPAGATE</span> <span class="operator">=</span> -<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">volatile</span> <span class="type">int</span> waitStatus;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 前驱节点</span></span><br><span class="line">        <span class="keyword">volatile</span> Node prev;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 后置节点</span></span><br><span class="line">        <span class="keyword">volatile</span> Node next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 使该节点排队的线程。 在构造上初始化，使用后消失。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">volatile</span> Thread thread;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 存储在condition队列中的后继节点</span></span><br><span class="line">        Node nextWaiter;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 如果节点在共享模式下等待，则返回true。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">isShared</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> nextWaiter == SHARED;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 返回上一个节点，如果为null，则抛出NullPointerException。 </span></span><br><span class="line"><span class="comment">         * 空检查可能会被忽略，但是它可以帮助VM。</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> the predecessor of this node</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">final</span> Node <span class="title function_">predecessor</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> prev;</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node() &#123;    <span class="comment">// 用于建立初始标头或SHARED标记</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node(Thread thread, Node mode) &#123;     <span class="comment">// 由addWaiter使用</span></span><br><span class="line">            <span class="built_in">this</span>.nextWaiter = mode;</span><br><span class="line">            <span class="built_in">this</span>.thread = thread;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node(Thread thread, <span class="type">int</span> waitStatus) &#123; <span class="comment">// 根据条件使用</span></span><br><span class="line">            <span class="built_in">this</span>.waitStatus = waitStatus;</span><br><span class="line">            <span class="built_in">this</span>.thread = thread;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="CAS的原理"><a href="#CAS的原理" class="headerlink" title="CAS的原理"></a>CAS的原理</h3><p>CAS全称是Compare and Swap，即比较并交换，是通过原子指令来实现多线程的同步功能，将获取存储在内存地址的原值和指定的内存地址进行比较，只有当他们相等时，交换指定的预期值和内存中的值，这个操作是原子操作，若不相等，则重新获取存储在内存地址的原值。</p><p>CAS操作都是使用的Unsafe类的方法里设置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">compareAndSwapObject</span><span class="params">(Object var1, <span class="type">long</span> var2, Object var4, Object var5)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">compareAndSwapInt</span><span class="params">(Object var1, <span class="type">long</span> var2, <span class="type">int</span> var4, <span class="type">int</span> var5)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">compareAndSwapLong</span><span class="params">(Object var1, <span class="type">long</span> var2, <span class="type">long</span> var4, <span class="type">long</span> var6)</span>;</span><br></pre></td></tr></table></figure><h3 id="事务的隔离级别，以及分别解决了什么"><a href="#事务的隔离级别，以及分别解决了什么" class="headerlink" title="事务的隔离级别，以及分别解决了什么"></a>事务的隔离级别，以及分别解决了什么</h3><table><thead><tr><th align="center">事务隔离级别</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="center">Read-uncommitted</td><td align="center">是</td><td align="center">是</td><td align="center">是</td></tr><tr><td align="center">Read-committed</td><td align="center">否</td><td align="center">是</td><td align="center">是</td></tr><tr><td align="center">Repeatable-read</td><td align="center">否</td><td align="center">否</td><td align="center">是</td></tr><tr><td align="center">Serializable</td><td align="center">否</td><td align="center">否</td><td align="center">否</td></tr></tbody></table><h3 id="Mysql除了可重复读的隔离级别还有哪些？"><a href="#Mysql除了可重复读的隔离级别还有哪些？" class="headerlink" title="Mysql除了可重复读的隔离级别还有哪些？"></a>Mysql除了可重复读的隔离级别还有哪些？</h3><p>还有读未提交、读已提交、串行化这些隔离级别</p><h3 id="Mysql-日志类型"><a href="#Mysql-日志类型" class="headerlink" title="Mysql 日志类型"></a>Mysql 日志类型</h3><p>重做日志（redo log）：确保事务的持久性。redo日志记录事务执行后的状态，用来恢复未写入data file的已成功事务更新的数据。防止在发生故障的时间点，尚有脏页未写入磁盘，在重启<a href="https://www.2cto.com/database/MySQL/">mysql</a>服务的时候，根据redo log进行重做，从而达到事务的持久性这一特性。</p><p>回滚日志（undo log）：保证数据的原子性，保存了事务发生之前的数据的一个版本，可以用于回滚，同时可以提供多版本并发控制下的读（MVCC），也即非锁定读。</p><p>二进制日志（binlog）：用于复制，在主从复制中，从库利用主库上的binlog进行重播，实现主从同步。用于数据库的基于时间点的还原。</p><p>错误日志（errorlog）：错误日志记录着mysqld启动和停止,以及服务器在运行过程中发生的错误的相关信息。在默认情况下，系统记录错误日志的功能是关闭的，错误信息被输出到标准错误输出。</p><p>慢查询日志（slow query log）：慢日志记录执行时间过长和没有使用索引的查询语句，报错select、update、delete以及insert语句，慢日志只会记录执行成功的语句。</p><p>一般查询日志（general log）：记录了服务器接收到的每一个查询或是命令，无论这些查询或是命令是否正确甚至是否包含语法错误，general log 都会将其记录下来 ，记录的格式为 {Time ，Id ，Command，Argument }。也正因为mysql服务器需要不断地记录日志，开启General log会产生不小的系统开销。 因此，Mysql默认是把General log关闭的。</p><p>中继日志（relay log）：中继日志是连接mastert和slave的信息，它是复制的核心，I/O线程将来自master的事件存储到中继日志中，中继日志充当缓冲，这样master不必等待slave执行完成就可以发送下一个事件。</p><h3 id="Mysql索引为什么使用B-tree"><a href="#Mysql索引为什么使用B-tree" class="headerlink" title="Mysql索引为什么使用B+tree"></a>Mysql索引为什么使用B+tree</h3><ul><li>B树能解决的问题，B+树都能解决，且能够更好的解决，降低了树的高度，增加节点的数据存储量。</li><li>B+树的扫库和扫表能力更强，如果根据索引去根据数据表扫描，对B树扫描，需要整颗树遍历，B+树只需要遍历所有的叶子节点</li><li>B+树的磁盘读写能力更强，根结点和支节点不保存数据区，所有的根结点和支节点同样大小的情况下，保存的关键字更多，叶子结点不存子节点的引用，所以，B+树读写一次磁盘加载的关键字更多</li><li>B+树具有天然的排序功能</li><li>B+树的查询效率更加稳定，每次查询数据，查询IO次数是稳定的</li></ul><h3 id="Mysql的最左匹配原则是什么"><a href="#Mysql的最左匹配原则是什么" class="headerlink" title="Mysql的最左匹配原则是什么"></a>Mysql的最左匹配原则是什么</h3><ul><li><p>最左前缀匹配原则，非常重要的原则，mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</p></li><li><p>=和in可以乱序，比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式。</p></li></ul><h3 id="Mysql的锁有哪些"><a href="#Mysql的锁有哪些" class="headerlink" title="Mysql的锁有哪些"></a>Mysql的锁有哪些</h3><h4 id="参考官方文档"><a href="#参考官方文档" class="headerlink" title="参考官方文档"></a><a href="https://docs.oracle.com/cd/E17952_01/mysql-5.5-en/innodb-locking.html#innodb-shared-exclusive-locks">参考官方文档</a></h4><p><a href="https://learnku.com/articles/39212?order_by=vote_count&">参考其他文档分享</a></p><h4 id="共享锁和排他锁"><a href="#共享锁和排他锁" class="headerlink" title="共享锁和排他锁"></a>共享锁和排他锁</h4><p>在InnoDB中是实现标准的行级锁定，其中有两种类型的锁定：共享（S）锁定和排他（X）锁定。</p><ul><li>读锁（read lock），也叫共享锁（shared lock）允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁</li></ul><ul><li>写锁（write lock），也叫排他锁（exclusive lock）允许获得排他锁的事务更新数据，阻止其他事务取得相同数据集的共享锁和排他锁</li></ul><h4 id="意向锁"><a href="#意向锁" class="headerlink" title="意向锁"></a>意向锁</h4><p>InnoDB支持多种粒度锁定，允许行锁和表锁并存。 例如，诸如LOCK TABLES … WRITE之类的语句对指定表采用排他锁（X锁）。 为了使在多个粒度级别上的锁定变得切实可行，InnoDB使用了意图锁定。 意向锁是表级锁，指示事务稍后对表中的行需要哪种类型的锁（共享锁或排他锁）。 有两种类型的意图锁：</p><ul><li>意向共享锁（IS）一个事务给一个数据行加共享锁时，必须先获得表的IS锁</li></ul><ul><li>意向排它锁（IX）一个事务给一个数据行加排他锁时，必须先获得该表的IX锁</li></ul><h4 id="记录锁"><a href="#记录锁" class="headerlink" title="记录锁"></a>记录锁</h4><p>记录锁定是对索引记录的锁定。 例如<strong>SELECT c1 FROM t WHERE c1 = 10 FOR UPDATE</strong>； 防止任何其他事务插入，更新或删除t.c1值为10的行。</p><h4 id="间隙锁"><a href="#间隙锁" class="headerlink" title="间隙锁"></a>间隙锁</h4><p>间隙锁定是对索引记录之间的间隙的锁定，或者是对第一个或最后一个索引记录之前的间隙的锁定。 例如**SELECT c1 FROM t WHERE c1 BETWEEN 10 and 20 FOR UPDATE;**。 防止其他事务将值15插入到t.c1列中，无论该列中是否已有这样的值，因为该范围中所有现有值之间的间隙是锁定的。</p><h4 id="Next-Key-锁"><a href="#Next-Key-锁" class="headerlink" title="Next-Key 锁"></a>Next-Key 锁</h4><p>下一键锁定是索引记录上的记录锁定和索引记录之前的间隙上的间隙锁定的组合。</p><h4 id="插入意图锁"><a href="#插入意图锁" class="headerlink" title="插入意图锁"></a>插入意图锁</h4><p>插入意图锁是在行插入之前通过INSERT操作设置的间隙锁的一种。 此锁以这种方式发出信号，表明要插入的意图是：如果多个事务未插入间隙中的相同位置，则不必等待彼此插入的多个事务。 假设有索引记录，其值分别为4和7。单独的事务分别尝试插入值5和6，在获得插入行的排他锁之前，每个事务都使用插入意图锁来锁定4和7之间的间隙， 但不要互相阻塞，因为行是无冲突的。</p><h4 id="自增锁"><a href="#自增锁" class="headerlink" title="自增锁"></a>自增锁</h4><p>AUTO-INC锁是一种特殊的表级锁，由插入到具有AUTO_INCREMENT列的表中的事务获取。 在最简单的情况下，如果一个事务正在向表中插入值，那么任何其他事务都必须等待自己在该表中进行插入，以便第一个事务插入的行接收连续的主键值。</p><h3 id="Mysql-InnoDB和MyISAM的区别"><a href="#Mysql-InnoDB和MyISAM的区别" class="headerlink" title="Mysql InnoDB和MyISAM的区别"></a>Mysql InnoDB和MyISAM的区别</h3><ol><li>InnoDB 支持事务，MyISAM 不支持事务。这是 MySQL 将默认存储引擎从 MyISAM 变成 InnoDB 的重要原因之一；</li><li>InnoDB 支持外键，而 MyISAM 不支持。对一个包含外键的 InnoDB 表转为 MYISAM 会失败；  </li><li>InnoDB 是聚集索引，MyISAM 是非聚集索引。聚簇索引的文件存放在主键索引的叶子节点上，因此 InnoDB 必须要有主键，通过主键索引效率很高。但是辅助索引需要两次查询，先查询到主键，然后再通过主键查询到数据。因此，主键不应该过大，因为主键太大，其他索引也都会很大。而 MyISAM 是非聚集索引，数据文件是分离的，索引保存的是数据文件的指针。主键索引和辅助索引是独立的。 </li><li>InnoDB 不保存表的具体行数，执行 select count(*) from table 时需要全表扫描。而MyISAM 用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快；    </li><li>InnoDB 最小的锁粒度是行锁，MyISAM 最小的锁粒度是表锁。一个更新语句会锁住整张表，导致其他查询和更新都会被阻塞，因此并发访问受限。这也是 MySQL 将默认存储引擎从 MyISAM 变成 InnoDB 的重要原因之一；</li></ol><h3 id="Redis如何实现持久化的"><a href="#Redis如何实现持久化的" class="headerlink" title="Redis如何实现持久化的"></a>Redis如何实现持久化的</h3><p><em>Redis 提供了不同级别的持久化方式：</em></p><ul><li>RDB持久化方式能够在指定的时间间隔能对你的数据进行快照存储.</li><li>AOF持久化方式记录每次对服务器写的操作,当服务器重启的时候会重新执行这些命令来恢复原始的数据,AOF命令以redis协议追加保存每次写的操作到文件末尾.Redis还能对AOF文件进行后台重写,使得AOF文件的体积不至于过大.</li><li>如果你只希望你的数据在服务器运行的时候存在,你也可以不使用任何持久化方式.</li><li>你也可以同时开启两种持久化方式, 在这种情况下, 当redis重启的时候会优先载入AOF文件来恢复原始的数据,因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整.</li><li>最重要的事情是了解RDB和AOF持久化方式的不同,让我们以RDB持久化方式开始</li></ul><p><em>RDB 优点：</em></p><ul><li>RDB是一个非常紧凑的文件,它保存了某个时间点得数据集,非常适用于数据集的备份,比如你可以在每个小时报保存一下过去24小时内的数据,同时每天保存过去30天的数据,这样即使出了问题你也可以根据需求恢复到不同版本的数据集.</li><li>RDB是一个紧凑的单一文件,很方便传送到另一个远端数据中心或者亚马逊的S3（可能加密），非常适用于灾难恢复.</li><li>RDB在保存RDB文件时父进程唯一需要做的就是fork出一个子进程,接下来的工作全部由子进程来做，父进程不需要再做其他IO操作，所以RDB持久化方式可以最大化redis的性能.</li><li>与AOF相比,在恢复大的数据集的时候，RDB方式会更快一些</li></ul><p><em>RDB 缺点：</em></p><ul><li>如果你希望在redis意外停止工作（例如电源中断）的情况下丢失的数据最少的话，那么RDB不适合你.虽然你可以配置不同的save时间点(例如每隔5分钟并且对数据集有100个写的操作),是Redis要完整的保存整个数据集是一个比较繁重的工作,你通常会每隔5分钟或者更久做一次完整的保存,万一在Redis意外宕机,你可能会丢失几分钟的数据.</li><li>RDB 需要经常fork子进程来保存数据集到硬盘上,当数据集比较大的时候,fork的过程是非常耗时的,可能会导致Redis在一些毫秒级内不能响应客户端的请求.如果数据集巨大并且CPU性能不是很好的情况下,这种情况会持续1秒,AOF也需要fork,但是你可以调节重写日志文件的频率来提高数据集的耐久度.</li></ul><p><em>AOF 优点</em></p><ul><li>使用AOF会让你的Redis更加耐久: 你可以使用不同的fsync策略：无fsync,每秒fsync,每次写的时候fsync.使用默认的每秒fsync策略,Redis的性能依然很好(fsync是由后台线程进行处理的,主线程会尽力处理客户端请求),一旦出现故障，你最多丢失1秒的数据.</li><li>AOF文件是一个只进行追加的日志文件,所以不需要写入seek,即使由于某些原因(磁盘空间已满，写的过程中宕机等等)未执行完整的写入命令,你也也可使用redis-check-aof工具修复这些问题.</li><li>Redis 可以在 AOF 文件体积变得过大时，自动地在后台对 AOF 进行重写： 重写后的新 AOF 文件包含了恢复当前数据集所需的最小命令集合。 整个重写操作是绝对安全的，因为 Redis 在创建新 AOF 文件的过程中，会继续将命令追加到现有的 AOF 文件里面，即使重写过程中发生停机，现有的 AOF 文件也不会丢失。 而一旦新 AOF 文件创建完毕，Redis 就会从旧 AOF 文件切换到新 AOF 文件，并开始对新 AOF 文件进行追加操作。</li><li>AOF 文件有序地保存了对数据库执行的所有写入操作， 这些写入操作以 Redis 协议的格式保存， 因此 AOF 文件的内容非常容易被人读懂， 对文件进行分析（parse）也很轻松。 导出（export） AOF 文件也非常简单： 举个例子， 如果你不小心执行了 FLUSHALL 命令， 但只要 AOF 文件未被重写， 那么只要停止服务器， 移除 AOF 文件末尾的 FLUSHALL 命令， 并重启 Redis ， 就可以将数据集恢复到 FLUSHALL 执行之前的状态。</li></ul><p><em>AOF 缺点：</em></p><ul><li>对于相同的数据集来说，AOF 文件的体积通常要大于 RDB 文件的体积。</li><li>根据所使用的 fsync 策略，AOF 的速度可能会慢于 RDB 。 在一般情况下， 每秒 fsync 的性能依然非常高， 而关闭 fsync 可以让 AOF 的速度和 RDB 一样快， 即使在高负荷之下也是如此。 不过在处理巨大的写入载入时，RDB 可以提供更有保证的最大延迟时间（latency）。</li></ul><h3 id="项目中如何做链路跟踪的"><a href="#项目中如何做链路跟踪的" class="headerlink" title="项目中如何做链路跟踪的"></a>项目中如何做链路跟踪的</h3><p>Zipkin 做服务链路跟踪</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/901d8359-470a-466c-9f9a-ab717480529d&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试总结" scheme="https://chivalry727.github.io/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="面试总结" scheme="https://chivalry727.github.io/tags/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>面试总结（某猎头公司）</title>
    <link href="https://chivalry727.github.io/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93%EF%BC%88%E6%9F%90%E7%8C%8E%E5%A4%B4%EF%BC%89/"/>
    <id>https://chivalry727.github.io/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93%EF%BC%88%E6%9F%90%E7%8C%8E%E5%A4%B4%EF%BC%89/</id>
    <published>2020-08-25T00:13:59.000Z</published>
    <updated>2025-02-27T11:13:10.770Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/user-attachments/assets/901d8359-470a-466c-9f9a-ab717480529d"></p><span id="more"></span><h2 id="面试总结（某猎头公司）"><a href="#面试总结（某猎头公司）" class="headerlink" title="面试总结（某猎头公司）"></a>面试总结（某猎头公司）</h2><h3 id="两个Long对象判断相等"><a href="#两个Long对象判断相等" class="headerlink" title="两个Long对象判断相等"></a>两个Long对象判断相等</h3><p>使用equals方法判断两个long对象相等</p><h3 id="UTF-8字符如何转成GBK集，具体怎么实现的"><a href="#UTF-8字符如何转成GBK集，具体怎么实现的" class="headerlink" title="UTF-8字符如何转成GBK集，具体怎么实现的"></a>UTF-8字符如何转成GBK集，具体怎么实现的</h3><p>String的重载方法，将字节数组传入String的构造器，传入指定的字符，可以实现相互转换字符集</p><h3 id="线程的几种创建方法"><a href="#线程的几种创建方法" class="headerlink" title="线程的几种创建方法"></a>线程的几种创建方法</h3><ol><li>继承Thread类，并复写run方法，创建该类对象，调用start方法开启线程。此方式没有返回值。</li><li>实现Runnable接口，复写run方法，创建Thread类对象，将Runnable子类对象传递给Thread类对象。调用start方法开启线程。此方法2较之方法1好，将线程对象和线程任务对象分离开。降低了耦合性，利于维护。此方式没有返回值。</li><li>创建FutureTask对象，创建Callable子类对象，复写call(相当于run)方法，将其传递给FutureTask对象（相当于一个Runnable）。 创建Thread类对象，将FutureTask对象传递给Thread对象。调用start方法开启线程。这种方式可以获得线程执行完之后的返回值。该方法使用Runnable功能更加强大的一个子类.这个子类是具有返回值类型的任务方法。</li><li>线程池的方式</li></ol><h3 id="线程池的核心参数介绍一下"><a href="#线程池的核心参数介绍一下" class="headerlink" title="线程池的核心参数介绍一下"></a>线程池的核心参数介绍一下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,</span></span><br><span class="line"><span class="params">                          <span class="type">int</span> maximumPoolSize,</span></span><br><span class="line"><span class="params">                          <span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">                          TimeUnit unit,</span></span><br><span class="line"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="line"><span class="params">                          ThreadFactory threadFactory,</span></span><br><span class="line"><span class="params">                          RejectedExecutionHandler handler)</span></span><br></pre></td></tr></table></figure><p><strong>corePoolSize核心线程数量</strong>：线程池内部核心线程数量，如果线程池收到任务，且线程池内部线程数量没有达到corePoolSize，线程池会直接给此任务创建一个新线程来处理此任务</p><p><strong>maximumPoolSize最大允许线程数量</strong>：线程池内部线程数量已经达到核心线程数量，即corePoolSize，并且<strong>任务队列已满</strong>，此时如果继续有任务被提交，将判断线程池内部线程总数是否达到maximumPoolSize，如果小于maximumPoolSize，将继续使用线程工厂创建新线程。如果线程池内线程数量等于maximumPoolSize，就不会继续创建线程，将触发拒绝策略RejectedExecutionHandler</p><p><strong>keepAliveTime、unit</strong>：当线程池内部的线程数量大于corePoolSize，则多出来的线程会在keepAliveTime时间之后销毁</p><p><strong>workQueue工作队列</strong>：线程池需要执行的任务的队列，通常有固定数量的ArrayBlockingQueue，无限制的LinkedBlockingQueue</p><p><strong>threadFactory线程工厂</strong>：线程池内初初始没有线程，任务来了之后，会使用线程工厂创建线程</p><p><strong>handler拒绝策略</strong>：当任务队列已满，又有新的任务进来时，会回调此接口。有几种默认实现，通常建议根据具体业务来自行实现</p><h3 id="线程池核心线程数是5个，启动的时候会创建几个工作线程"><a href="#线程池核心线程数是5个，启动的时候会创建几个工作线程" class="headerlink" title="线程池核心线程数是5个，启动的时候会创建几个工作线程"></a>线程池核心线程数是5个，启动的时候会创建几个工作线程</h3><p>启动的时候不会创建线程，只有执行execute方法的时候才会创建工作线程，每次执行execute方法会创建一个工作线程执行任务，直到工作线程等于核心线程数</p><h3 id="线程池的阻塞队列里的任务什么时候会被获取执行"><a href="#线程池的阻塞队列里的任务什么时候会被获取执行" class="headerlink" title="线程池的阻塞队列里的任务什么时候会被获取执行"></a>线程池的阻塞队列里的任务什么时候会被获取执行</h3><p>当工作线程满了并且等于核心线程数的时候，如果继续向线程池提交任务，队列如果也没有满的话，就将会从阻塞队列里获取任务并执行；如果队列满了，并且核心线程小于最大线程数的时候，就会创建新的工作线程从队列获取任务执行</p><h3 id="Java-Exception的父类是什么"><a href="#Java-Exception的父类是什么" class="headerlink" title="Java Exception的父类是什么"></a>Java Exception的父类是什么</h3><p>Throwable是所有异常类和Error的父类</p><h3 id="RuntimeException、Exception和Error区别"><a href="#RuntimeException、Exception和Error区别" class="headerlink" title="RuntimeException、Exception和Error区别"></a>RuntimeException、Exception和Error区别</h3><p>RuntimeException是运行时异常类</p><p>Exception是异常类，是运行时异常的父类</p><p>Error是错误类</p><h3 id="项目的业务异常为什么要定义RuntimeException"><a href="#项目的业务异常为什么要定义RuntimeException" class="headerlink" title="项目的业务异常为什么要定义RuntimeException"></a>项目的业务异常为什么要定义RuntimeException</h3><p>因为是业务类的异常，业务异常都是业务类型的错误，所以只能定义运行时异常</p><h3 id="Http和Https区别"><a href="#Http和Https区别" class="headerlink" title="Http和Https区别"></a>Http和Https区别</h3><p>https是加密的http协议</p><h3 id="Spring-Bean-默认类型"><a href="#Spring-Bean-默认类型" class="headerlink" title="Spring Bean 默认类型"></a>Spring Bean 默认类型</h3><p>单例的Singleton Bean</p><h3 id="单例Bean-原型Bean-在销毁的时候是否一样的"><a href="#单例Bean-原型Bean-在销毁的时候是否一样的" class="headerlink" title="单例Bean 原型Bean 在销毁的时候是否一样的"></a>单例Bean 原型Bean 在销毁的时候是否一样的</h3><p>不一样，scope为prototype的bean，容器会将创建好的对象实例返回给请求方，之后，容器就不再拥有其引用，请求方需要自己负责当前对象后继生命周期的管理工作，包括该对象的销毁。</p><p>所以：scope为singleton的bean的destroy方法则是在容器关闭时执行，而scope为prototype的bean是不会执行destroy方法的</p><h3 id="Mysql-联合索引-a-b-c-，以下哪些会走索引"><a href="#Mysql-联合索引-a-b-c-，以下哪些会走索引" class="headerlink" title="Mysql 联合索引 (a + b + c)，以下哪些会走索引"></a>Mysql 联合索引 (a + b + c)，以下哪些会走索引</h3><p> select * from table where a = ? and b = ? 会走索引<br> select * from table where a = ? and c = ? 会<br> select * from table where b = ? and c = ? 不会<br> select * from table where b = ? and a = ? 会</p><p>建索引的几大原则：</p><p>1、最左前缀匹配原则，非常重要的原则，mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</p><p>2、=和in可以乱序，比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式。</p><p>3、尽量选择区分度高的列作为索引，区分度的公式是count(distinct col)/count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条记录。</p><p>4、索引列不能参与计算，保持列“干净”，比如from_unixtime(create_time) = ’2014-05-29’就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。所以语句应该写成create_time = unix_timestamp(’2014-05-29’)。</p><p>5、尽量的扩展索引，不要新建索引。比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可。</p><h3 id="有一个user表，需要根据age倒序排，然后获取50-80行的数据，sql怎么写"><a href="#有一个user表，需要根据age倒序排，然后获取50-80行的数据，sql怎么写" class="headerlink" title="有一个user表，需要根据age倒序排，然后获取50-80行的数据，sql怎么写"></a>有一个user表，需要根据age倒序排，然后获取50-80行的数据，sql怎么写</h3><p>SELECT * FROM user ORDER BY age desc limit 50, 30;</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/901d8359-470a-466c-9f9a-ab717480529d&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试总结" scheme="https://chivalry727.github.io/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="面试总结" scheme="https://chivalry727.github.io/tags/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之模板方法模式</title>
    <link href="https://chivalry727.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chivalry727.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-08-24T12:53:51.000Z</published>
    <updated>2025-02-26T12:11:17.211Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/user-attachments/assets/da2bd8a1-d8b6-45e1-9fe0-f798058c9c72"></p><span id="more"></span><h2 id="设计模式之模板方法模式"><a href="#设计模式之模板方法模式" class="headerlink" title="设计模式之模板方法模式"></a>设计模式之模板方法模式</h2><p>封装算法，好让子类可以在任何时候都可以将自己挂接近运算里。</p><h3 id="咖啡示例"><a href="#咖啡示例" class="headerlink" title="咖啡示例"></a>咖啡示例</h3><p>咖啡师傅训练手册：各位师傅！准备饮料时，请精确地遵循下面的冲泡法</p><p>咖啡冲泡法：</p><ol><li>把水煮沸</li><li>用沸水冲泡咖啡</li><li>把咖啡倒进杯子</li><li>加糖和牛奶</li></ol><p>茶冲泡法：</p><ol><li>把水煮沸</li><li>用沸水冲泡茶叶</li><li>把茶倒进杯子</li><li>加柠檬</li></ol><h3 id="快速搞定咖啡和茶的类"><a href="#快速搞定咖啡和茶的类" class="headerlink" title="快速搞定咖啡和茶的类"></a>快速搞定咖啡和茶的类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 咖啡</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-25 21:38:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 制作咖啡</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">prepareRecipe</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 烧水</span></span><br><span class="line">        boilWater();</span><br><span class="line">        <span class="comment">// 冲泡咖啡粉</span></span><br><span class="line">        brewCoffeeGrinds();</span><br><span class="line">        <span class="comment">// 倒入杯子</span></span><br><span class="line">        pourInCup();</span><br><span class="line">        <span class="comment">// 加糖和牛奶</span></span><br><span class="line">        addSugarAndMilk();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addSugarAndMilk</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Adding Sugar and Milk&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pourInCup</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Pouring into cup&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">brewCoffeeGrinds</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dripping Coffee through filter&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">boilWater</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Boiling water&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 茶</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-25 21:41:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tea</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 制作茶</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">prepareRecipe</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 烧水</span></span><br><span class="line">        boilWater();</span><br><span class="line">        <span class="comment">// 冲泡茶包</span></span><br><span class="line">        steepTeaBag();</span><br><span class="line">        <span class="comment">// 倒入杯子</span></span><br><span class="line">        pourInCup();</span><br><span class="line">        <span class="comment">// 加柠檬</span></span><br><span class="line">        addLemon();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addLemon</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Adding Lemon&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pourInCup</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Pouring into cup&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">steepTeaBag</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Steeping the tea&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">boilWater</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Boiling water&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象-prepareRecipe"><a href="#抽象-prepareRecipe" class="headerlink" title="抽象 prepareRecipe()"></a>抽象 prepareRecipe()</h3><p>将咖啡和茶的制作共同点抽取出来，让我们每个子类中逐步抽象prepareRecipe()…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 咖啡因饮料抽象类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-25 21:52:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">CaffeineBeverage</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 我们不希望子类修改这个方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">prepareRecipe</span><span class="params">()</span> &#123;</span><br><span class="line">        boilWater();</span><br><span class="line">        brew();</span><br><span class="line">        pourInCup();</span><br><span class="line">        addCondiments();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 冲泡，因为咖啡和茶的冲泡方法不一样，交给子类去实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">brew</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加调味品，子类可以自定义添加调味品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">addCondiments</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 装杯</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pourInCup</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Pouring into cup&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 烧水</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">boilWater</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Boiling water&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改造我们的咖啡和茶类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 咖啡</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-25 21:38:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Coffee</span> <span class="keyword">extends</span> <span class="title class_">CaffeineBeverage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">brew</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dripping Coffee through filter&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addCondiments</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Adding Sugar and Milk&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 茶</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-25 21:41:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tea</span> <span class="keyword">extends</span> <span class="title class_">CaffeineBeverage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">brew</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Steeping the tea&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addCondiments</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Adding Lemon&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="认识模板方法"><a href="#认识模板方法" class="headerlink" title="认识模板方法"></a>认识模板方法</h3><p>基本上，我们刚刚实现的就是模板方法模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">CaffeineBeverage</span> &#123;</span><br><span class="line">    <span class="comment">// prepareRecipe() 就是我们的模板方法，该模板方法里的有些方法是超类处理，有些是子类处理</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">prepareRecipe</span><span class="params">()</span><span class="params">()</span> &#123;</span><br><span class="line">        boilWater();</span><br><span class="line">        brew();</span><br><span class="line">        pourInCup();</span><br><span class="line">        addCondiments();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 需要由子类提供的方法，必须在超类中声明为抽象</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">brew</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">addCondiments</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pourInCup</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">// 实现</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">boilWater</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>模板方法定义了一个算法的步骤，并允许子类为一个或多个步骤提供实现。</strong></p><h3 id="走，泡茶去…"><a href="#走，泡茶去…" class="headerlink" title="走，泡茶去….."></a>走，泡茶去…..</h3><ol><li><p>首先我们需要一个茶对象… </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Tea</span> <span class="variable">myTea</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tea</span>();</span><br></pre></td></tr></table></figure></li><li><p>然后我们调用这个模板方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myTea.prepareRecipe();</span><br></pre></td></tr></table></figure></li><li><p>首先，把水煮沸，由超类进行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boilWater();</span><br></pre></td></tr></table></figure></li><li><p>接下来，我们需要泡茶，这件事情只有子类才知道怎么做</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew();</span><br></pre></td></tr></table></figure></li><li><p>现在把茶倒进杯子中，所有的饮料做法都一样，所以这件事情发生在超类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pourInCup();</span><br></pre></td></tr></table></figure></li><li><p>最后，我们加紧调料，由于调料是各个饮料独有的，所以由子类来实现它</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addCondiments();</span><br></pre></td></tr></table></figure></li></ol><h3 id="定义模板方法模式"><a href="#定义模板方法模式" class="headerlink" title="定义模板方法模式"></a>定义模板方法模式</h3><p><strong>模板方法模式</strong>在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。</p><h3 id="对模板方法进行挂钩"><a href="#对模板方法进行挂钩" class="headerlink" title="对模板方法进行挂钩"></a>对模板方法进行挂钩</h3><p>钩子是一种被声明在抽象类中的方法，但只有空的或者默认的实现。钩子的存在，可以让子类有能力对算法的不同点进行挂钩。要不要挂钩，由子类来决定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 咖啡因饮料抽象类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-25 21:52:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">CaffeineBeverageWithHook</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 我们不希望子类修改这个方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">prepareRecipe</span><span class="params">()</span> &#123;</span><br><span class="line">        boilWater();</span><br><span class="line">        brew();</span><br><span class="line">        pourInCup();</span><br><span class="line">        <span class="comment">// 如果顾客想要调料，才调用添加调料的方法</span></span><br><span class="line">        <span class="keyword">if</span> (customerWantsCondiments()) &#123;</span><br><span class="line">            addCondiments();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 冲泡，因为咖啡和茶的冲泡方法不一样，交给子类去实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">brew</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加调味品，子类可以自定义添加调味品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">addCondiments</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 装杯</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pourInCup</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Pouring into cup&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 烧水</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">boilWater</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Boiling water&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这是一个钩子，子类可以覆盖这个方法， 但不见得要这么做</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">customerWantsCondiments</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用钩子"><a href="#使用钩子" class="headerlink" title="使用钩子"></a>使用钩子</h3><p>为了使用钩子，我们在子类中覆盖它。在这里，钩子控制了咖啡因饮料是否执行某部分算法；说得更明确一些，就是饮料中是否要加进调料。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 茶</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-25 21:41:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TeaWithHook</span> <span class="keyword">extends</span> <span class="title class_">CaffeineBeverageWithHook</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">brew</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Steeping the tea&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addCondiments</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Adding Lemon&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 覆盖钩子，实现自己的功能，根据用户输入，是否需要添加配料</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">customerWantsCondiments</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getUserInput().toLowerCase().startsWith(<span class="string">&quot;y&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户是否要加调料</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getUserInput</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Would you like lemon with your tea (y/n)?&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> in.readLine();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;no&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行测试程序"><a href="#执行测试程序" class="headerlink" title="执行测试程序"></a>执行测试程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeverageTestDrive</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TeaWithHook</span> <span class="variable">teaWithHook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TeaWithHook</span>();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;Make tea...&quot;</span>);</span><br><span class="line">        teaWithHook.prepareRecipe();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Make tea...</span><br><span class="line">Boiling water</span><br><span class="line">Steeping the tea</span><br><span class="line">Pouring into cup</span><br><span class="line">Would you like lemon with your tea (y/n)? y</span><br><span class="line">Adding Lemon</span><br></pre></td></tr></table></figure><h3 id="好莱坞原则"><a href="#好莱坞原则" class="headerlink" title="好莱坞原则"></a>好莱坞原则</h3><p>我们有一个新的设计原则，称为好莱坞原则：</p><p><strong>好莱坞原则</strong>：别调用（打电话给）我们，我们会调用（打电话给）你。</p><h3 id="好莱坞原则和模板方法"><a href="#好莱坞原则和模板方法" class="headerlink" title="好莱坞原则和模板方法"></a>好莱坞原则和模板方法</h3><p>好莱坞原则和模板方法之间的连接还算明细：当我们设计模板方法模式时，我们告诉子类，“不要调用我们，我们会调用你”。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>模板方法定义了算法的步骤，把这些步骤的实现延迟到了子类</li><li>模板方法模式为我们提供了一种代码复用的重要技巧</li><li>模板方法的抽象类可以定义具体方法、抽象方法和钩子</li><li>抽象方法由子类实现</li><li>钩子是一种方法，它在抽象类中不做事，或者只做默认的事情，子类可以选择要不要去覆盖它</li><li>为了防止子类改变模板方法中的算法，可以将模板方法声明为final</li><li>好莱坞原则告诉我们，将决策权放在高层模块中，以便决定如何以及何时调用底层模块</li><li>你将在真实世界代码中看到模板方法模式的许多变体，不要期待它们全都是一眼就可以被你认出的</li><li>策略模式和模板方法模式都封装算法，一个用组合，一个用继承</li><li>工厂方法是模板方法的一种特殊版本</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/da2bd8a1-d8b6-45e1-9fe0-f798058c9c72&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://chivalry727.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="模板方法模式" scheme="https://chivalry727.github.io/tags/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Template Method Design Pattern" scheme="https://chivalry727.github.io/tags/Template-Method-Design-Pattern/"/>
    
  </entry>
  
</feed>
